-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity coo_enc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    out_r_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC );
end;


architecture behav of coo_enc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "coo_enc_coo_enc,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.662000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=1910,HLS_SYN_LUT=2733,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal N_reg_63 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal M_reg_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal L_reg_73 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal a_ce0 : STD_LOGIC;
    signal a_we0 : STD_LOGIC;
    signal a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inputMatrix_fu_34_ap_start : STD_LOGIC;
    signal grp_inputMatrix_fu_34_ap_done : STD_LOGIC;
    signal grp_inputMatrix_fu_34_ap_idle : STD_LOGIC;
    signal grp_inputMatrix_fu_34_ap_ready : STD_LOGIC;
    signal grp_inputMatrix_fu_34_in_r_TREADY : STD_LOGIC;
    signal grp_inputMatrix_fu_34_matrix_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_inputMatrix_fu_34_matrix_ce0 : STD_LOGIC;
    signal grp_inputMatrix_fu_34_matrix_we0 : STD_LOGIC;
    signal grp_inputMatrix_fu_34_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inputMatrix_fu_34_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inputMatrix_fu_34_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inputMatrix_fu_34_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inputMatrix_fu_34_grp_fu_78_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inputMatrix_fu_34_grp_fu_78_p_ce : STD_LOGIC;
    signal grp_inputMatrix_fu_34_grp_fu_81_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_inputMatrix_fu_34_grp_fu_81_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_inputMatrix_fu_34_grp_fu_81_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_inputMatrix_fu_34_grp_fu_81_p_ce : STD_LOGIC;
    signal grp_outputMatrix_fu_41_ap_start : STD_LOGIC;
    signal grp_outputMatrix_fu_41_ap_done : STD_LOGIC;
    signal grp_outputMatrix_fu_41_ap_idle : STD_LOGIC;
    signal grp_outputMatrix_fu_41_ap_ready : STD_LOGIC;
    signal grp_outputMatrix_fu_41_out_r_TDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_outputMatrix_fu_41_out_r_TVALID : STD_LOGIC;
    signal grp_outputMatrix_fu_41_out_r_TREADY : STD_LOGIC;
    signal grp_outputMatrix_fu_41_matrix_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_outputMatrix_fu_41_matrix_ce0 : STD_LOGIC;
    signal grp_outputMatrix_fu_41_grp_fu_78_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_outputMatrix_fu_41_grp_fu_78_p_ce : STD_LOGIC;
    signal grp_outputMatrix_fu_41_grp_fu_81_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_outputMatrix_fu_41_grp_fu_81_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_outputMatrix_fu_41_grp_fu_81_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_outputMatrix_fu_41_grp_fu_81_p_ce : STD_LOGIC;
    signal grp_inputMatrix_fu_34_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_outputMatrix_fu_41_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_78_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_78_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_78_ce : STD_LOGIC;
    signal grp_fu_81_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_81_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_81_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_81_ce : STD_LOGIC;
    signal grp_fu_81_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal regslice_both_out_r_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal regslice_both_in_r_U_apdone_blk : STD_LOGIC;
    signal in_r_TDATA_int_regslice : STD_LOGIC_VECTOR (127 downto 0);
    signal in_r_TVALID_int_regslice : STD_LOGIC;
    signal in_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_r_U_ack_in : STD_LOGIC;
    signal out_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_r_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component coo_enc_inputMatrix IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        in_r_TVALID : IN STD_LOGIC;
        in_r_TREADY : OUT STD_LOGIC;
        matrix_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        matrix_ce0 : OUT STD_LOGIC;
        matrix_we0 : OUT STD_LOGIC;
        matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_78_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_78_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_78_p_ce : OUT STD_LOGIC;
        grp_fu_81_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_81_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_81_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_81_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_81_p_ce : OUT STD_LOGIC );
    end component;


    component coo_enc_outputMatrix IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        out_r_TVALID : OUT STD_LOGIC;
        out_r_TREADY : IN STD_LOGIC;
        matrix_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        matrix_ce0 : OUT STD_LOGIC;
        matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        N : IN STD_LOGIC_VECTOR (31 downto 0);
        M : IN STD_LOGIC_VECTOR (31 downto 0);
        L : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_78_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_78_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_78_p_ce : OUT STD_LOGIC;
        grp_fu_81_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_81_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_81_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_81_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_81_p_ce : OUT STD_LOGIC );
    end component;


    component coo_enc_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component coo_enc_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component coo_enc_a_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component coo_enc_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    a_U : component coo_enc_a_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => a_address0,
        ce0 => a_ce0,
        we0 => a_we0,
        d0 => grp_inputMatrix_fu_34_matrix_d0,
        q0 => a_q0);

    grp_inputMatrix_fu_34 : component coo_enc_inputMatrix
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_inputMatrix_fu_34_ap_start,
        ap_done => grp_inputMatrix_fu_34_ap_done,
        ap_idle => grp_inputMatrix_fu_34_ap_idle,
        ap_ready => grp_inputMatrix_fu_34_ap_ready,
        in_r_TDATA => in_r_TDATA_int_regslice,
        in_r_TVALID => in_r_TVALID_int_regslice,
        in_r_TREADY => grp_inputMatrix_fu_34_in_r_TREADY,
        matrix_address0 => grp_inputMatrix_fu_34_matrix_address0,
        matrix_ce0 => grp_inputMatrix_fu_34_matrix_ce0,
        matrix_we0 => grp_inputMatrix_fu_34_matrix_we0,
        matrix_d0 => grp_inputMatrix_fu_34_matrix_d0,
        ap_return_0 => grp_inputMatrix_fu_34_ap_return_0,
        ap_return_1 => grp_inputMatrix_fu_34_ap_return_1,
        ap_return_2 => grp_inputMatrix_fu_34_ap_return_2,
        grp_fu_78_p_din0 => grp_inputMatrix_fu_34_grp_fu_78_p_din0,
        grp_fu_78_p_dout0 => grp_fu_78_p1,
        grp_fu_78_p_ce => grp_inputMatrix_fu_34_grp_fu_78_p_ce,
        grp_fu_81_p_din0 => grp_inputMatrix_fu_34_grp_fu_81_p_din0,
        grp_fu_81_p_din1 => grp_inputMatrix_fu_34_grp_fu_81_p_din1,
        grp_fu_81_p_opcode => grp_inputMatrix_fu_34_grp_fu_81_p_opcode,
        grp_fu_81_p_dout0 => grp_fu_81_p2,
        grp_fu_81_p_ce => grp_inputMatrix_fu_34_grp_fu_81_p_ce);

    grp_outputMatrix_fu_41 : component coo_enc_outputMatrix
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_outputMatrix_fu_41_ap_start,
        ap_done => grp_outputMatrix_fu_41_ap_done,
        ap_idle => grp_outputMatrix_fu_41_ap_idle,
        ap_ready => grp_outputMatrix_fu_41_ap_ready,
        out_r_TDATA => grp_outputMatrix_fu_41_out_r_TDATA,
        out_r_TVALID => grp_outputMatrix_fu_41_out_r_TVALID,
        out_r_TREADY => grp_outputMatrix_fu_41_out_r_TREADY,
        matrix_address0 => grp_outputMatrix_fu_41_matrix_address0,
        matrix_ce0 => grp_outputMatrix_fu_41_matrix_ce0,
        matrix_q0 => a_q0,
        N => N_reg_63,
        M => M_reg_68,
        L => L_reg_73,
        grp_fu_78_p_din0 => grp_outputMatrix_fu_41_grp_fu_78_p_din0,
        grp_fu_78_p_dout0 => grp_fu_78_p1,
        grp_fu_78_p_ce => grp_outputMatrix_fu_41_grp_fu_78_p_ce,
        grp_fu_81_p_din0 => grp_outputMatrix_fu_41_grp_fu_81_p_din0,
        grp_fu_81_p_din1 => grp_outputMatrix_fu_41_grp_fu_81_p_din1,
        grp_fu_81_p_opcode => grp_outputMatrix_fu_41_grp_fu_81_p_opcode,
        grp_fu_81_p_dout0 => grp_fu_81_p2,
        grp_fu_81_p_ce => grp_outputMatrix_fu_41_grp_fu_81_p_ce);

    fpext_32ns_64_2_no_dsp_1_U48 : component coo_enc_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_78_p0,
        ce => grp_fu_78_ce,
        dout => grp_fu_78_p1);

    dcmp_64ns_64ns_1_2_no_dsp_1_U49 : component coo_enc_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_81_p0,
        din1 => grp_fu_81_p1,
        ce => grp_fu_81_ce,
        opcode => grp_fu_81_opcode,
        dout => grp_fu_81_p2);

    regslice_both_in_r_U : component coo_enc_regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TDATA,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_r_U_ack_in,
        data_out => in_r_TDATA_int_regslice,
        vld_out => in_r_TVALID_int_regslice,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_r_U_apdone_blk);

    regslice_both_out_r_U : component coo_enc_regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_outputMatrix_fu_41_out_r_TDATA,
        vld_in => grp_outputMatrix_fu_41_out_r_TVALID,
        ack_in => out_r_TREADY_int_regslice,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_r_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_inputMatrix_fu_34_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_inputMatrix_fu_34_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_inputMatrix_fu_34_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_inputMatrix_fu_34_ap_ready = ap_const_logic_1)) then 
                    grp_inputMatrix_fu_34_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_outputMatrix_fu_41_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_outputMatrix_fu_41_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_outputMatrix_fu_41_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_outputMatrix_fu_41_ap_ready = ap_const_logic_1)) then 
                    grp_outputMatrix_fu_41_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                L_reg_73 <= grp_inputMatrix_fu_34_ap_return_2;
                M_reg_68 <= grp_inputMatrix_fu_34_ap_return_1;
                N_reg_63 <= grp_inputMatrix_fu_34_ap_return_0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, grp_inputMatrix_fu_34_ap_done, grp_outputMatrix_fu_41_ap_done, ap_CS_fsm_state5, ap_CS_fsm_state6, regslice_both_out_r_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_inputMatrix_fu_34_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_outputMatrix_fu_41_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (regslice_both_out_r_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_state3, grp_inputMatrix_fu_34_matrix_address0, grp_outputMatrix_fu_41_matrix_address0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address0 <= grp_outputMatrix_fu_41_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_address0 <= grp_inputMatrix_fu_34_matrix_address0;
        else 
            a_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_state3, grp_inputMatrix_fu_34_matrix_ce0, grp_outputMatrix_fu_41_matrix_ce0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_ce0 <= grp_outputMatrix_fu_41_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_ce0 <= grp_inputMatrix_fu_34_matrix_ce0;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_we0_assign_proc : process(ap_CS_fsm_state3, grp_inputMatrix_fu_34_matrix_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_we0 <= grp_inputMatrix_fu_34_matrix_we0;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_inputMatrix_fu_34_ap_done)
    begin
        if ((grp_inputMatrix_fu_34_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_outputMatrix_fu_41_ap_done)
    begin
        if ((grp_outputMatrix_fu_41_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(regslice_both_out_r_U_apdone_blk)
    begin
        if ((regslice_both_out_r_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state6, regslice_both_out_r_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (regslice_both_out_r_U_apdone_blk = ap_const_logic_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, regslice_both_out_r_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (regslice_both_out_r_U_apdone_blk = ap_const_logic_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_fu_78_ce_assign_proc : process(ap_CS_fsm_state3, grp_inputMatrix_fu_34_grp_fu_78_p_ce, grp_outputMatrix_fu_41_grp_fu_78_p_ce, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_78_ce <= grp_outputMatrix_fu_41_grp_fu_78_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_78_ce <= grp_inputMatrix_fu_34_grp_fu_78_p_ce;
        else 
            grp_fu_78_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_78_p0_assign_proc : process(ap_CS_fsm_state3, grp_inputMatrix_fu_34_grp_fu_78_p_din0, grp_outputMatrix_fu_41_grp_fu_78_p_din0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_78_p0 <= grp_outputMatrix_fu_41_grp_fu_78_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_78_p0 <= grp_inputMatrix_fu_34_grp_fu_78_p_din0;
        else 
            grp_fu_78_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_81_ce_assign_proc : process(ap_CS_fsm_state3, grp_inputMatrix_fu_34_grp_fu_81_p_ce, grp_outputMatrix_fu_41_grp_fu_81_p_ce, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_81_ce <= grp_outputMatrix_fu_41_grp_fu_81_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_81_ce <= grp_inputMatrix_fu_34_grp_fu_81_p_ce;
        else 
            grp_fu_81_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_81_opcode_assign_proc : process(ap_CS_fsm_state3, grp_inputMatrix_fu_34_grp_fu_81_p_opcode, grp_outputMatrix_fu_41_grp_fu_81_p_opcode, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_81_opcode <= grp_outputMatrix_fu_41_grp_fu_81_p_opcode;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_81_opcode <= grp_inputMatrix_fu_34_grp_fu_81_p_opcode;
        else 
            grp_fu_81_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_81_p0_assign_proc : process(ap_CS_fsm_state3, grp_inputMatrix_fu_34_grp_fu_81_p_din0, grp_outputMatrix_fu_41_grp_fu_81_p_din0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_81_p0 <= grp_outputMatrix_fu_41_grp_fu_81_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_81_p0 <= grp_inputMatrix_fu_34_grp_fu_81_p_din0;
        else 
            grp_fu_81_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_81_p1_assign_proc : process(ap_CS_fsm_state3, grp_inputMatrix_fu_34_grp_fu_81_p_din1, grp_outputMatrix_fu_41_grp_fu_81_p_din1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_81_p1 <= grp_outputMatrix_fu_41_grp_fu_81_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_81_p1 <= grp_inputMatrix_fu_34_grp_fu_81_p_din1;
        else 
            grp_fu_81_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_inputMatrix_fu_34_ap_start <= grp_inputMatrix_fu_34_ap_start_reg;
    grp_outputMatrix_fu_41_ap_start <= grp_outputMatrix_fu_41_ap_start_reg;
    grp_outputMatrix_fu_41_out_r_TREADY <= (out_r_TREADY_int_regslice and ap_CS_fsm_state5);
    in_r_TREADY <= regslice_both_in_r_U_ack_in;

    in_r_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state3, grp_inputMatrix_fu_34_in_r_TREADY)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_r_TREADY_int_regslice <= grp_inputMatrix_fu_34_in_r_TREADY;
        else 
            in_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    out_r_TVALID <= regslice_both_out_r_U_vld_out;
end behav;
