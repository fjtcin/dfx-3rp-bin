-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity coo_enc_inputMatrix_Pipeline_VITIS_LOOP_16_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_TVALID : IN STD_LOGIC;
    data_V : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    mul : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    matrix_ce0 : OUT STD_LOGIC;
    matrix_we0 : OUT STD_LOGIC;
    matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_r_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    in_r_TREADY : OUT STD_LOGIC;
    L_0_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    L_0_out_ap_vld : OUT STD_LOGIC;
    grp_fu_471_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_471_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_471_p_ce : OUT STD_LOGIC;
    grp_fu_474_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_474_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_474_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_474_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_474_p_ce : OUT STD_LOGIC );
end;


architecture behav of coo_enc_inputMatrix_Pipeline_VITIS_LOOP_16_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_3EB0C6F7A0B5ED8D : STD_LOGIC_VECTOR (63 downto 0) := "0011111010110000110001101111011110100000101101011110110110001101";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln16_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_V_load_2_load_fu_249_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_predicate_op40_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln16_reg_486 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln356_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln35_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_504 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_1_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_1_reg_509 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_data_V_2_phi_fu_165_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_data_V_2_reg_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num0_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast1_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_V_fu_84 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_V_3_fu_310_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal empty_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln35_1_fu_408_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_92 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln16_fu_243_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal L_0_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln35_fu_400_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_15_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_16_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_17_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal i_cast_fu_234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_fu_321_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_s_fu_325_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln35_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_352_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln35_fu_362_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln35_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln35_fu_394_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_ce : STD_LOGIC;
    signal grp_fu_178_ce : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_355 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component coo_enc_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component coo_enc_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component coo_enc_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component coo_enc_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    L_0_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    L_0_fu_96 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    L_0_fu_96 <= select_ln35_fu_400_p3;
                end if;
            end if; 
        end if;
    end process;

    empty_15_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_15_fu_100 <= tmp_2;
                elsif ((ap_const_boolean_1 = ap_condition_355)) then 
                    empty_15_fu_100 <= in_r_TDATA(127 downto 96);
                end if;
            end if; 
        end if;
    end process;

    empty_16_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_16_fu_104 <= tmp_1;
                elsif ((ap_const_boolean_1 = ap_condition_355)) then 
                    empty_16_fu_104 <= in_r_TDATA(95 downto 64);
                end if;
            end if; 
        end if;
    end process;

    empty_17_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_17_fu_108 <= data_V;
                elsif ((ap_const_boolean_1 = ap_condition_355)) then 
                    empty_17_fu_108 <= in_r_TDATA(63 downto 32);
                end if;
            end if; 
        end if;
    end process;

    empty_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    empty_fu_88 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    empty_fu_88 <= select_ln35_1_fu_408_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_92 <= ap_const_lv15_0;
                elsif (((icmp_ln16_fu_238_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_92 <= add_ln16_fu_243_p2;
                end if;
            end if; 
        end if;
    end process;

    p_V_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_V_fu_84 <= ap_const_lv2_2;
                elsif (((icmp_ln16_fu_238_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    p_V_fu_84 <= p_V_3_fu_310_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln16_reg_486 <= icmp_ln16_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln35_1_reg_509 <= icmp_ln35_1_fu_372_p2;
                icmp_ln35_reg_504 <= icmp_ln35_fu_366_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    L_0_out <= L_0_fu_96;

    L_0_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln16_reg_486)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln16_reg_486 = ap_const_lv1_1))) then 
            L_0_out_ap_vld <= ap_const_logic_1;
        else 
            L_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln16_fu_243_p2 <= std_logic_vector(unsigned(i_fu_92) + unsigned(ap_const_lv15_1));
    add_ln35_fu_394_p2 <= std_logic_vector(unsigned(empty_fu_88) + unsigned(ap_const_lv32_1));
    and_ln35_fu_388_p2 <= (or_ln35_fu_384_p2 and grp_fu_474_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_00001_assign_proc : process(ap_enable_reg_pp0_iter1, in_r_TVALID, ap_predicate_op40_read_state2)
    begin
                ap_block_pp0_stage0_00001 <= ((ap_predicate_op40_read_state2 = ap_const_boolean_1) and (in_r_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, in_r_TVALID, ap_predicate_op40_read_state2)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_predicate_op40_read_state2 = ap_const_boolean_1) and (in_r_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, in_r_TVALID, ap_predicate_op40_read_state2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_predicate_op40_read_state2 = ap_const_boolean_1) and (in_r_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, in_r_TVALID, ap_predicate_op40_read_state2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_predicate_op40_read_state2 = ap_const_boolean_1) and (in_r_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(in_r_TVALID, ap_predicate_op40_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op40_read_state2 = ap_const_boolean_1) and (in_r_TVALID = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_355_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln16_fu_238_p2, p_V_fu_84)
    begin
                ap_condition_355 <= ((p_V_fu_84 = ap_const_lv2_0) and (icmp_ln16_fu_238_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln16_fu_238_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln16_fu_238_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_data_V_2_phi_fu_165_p8_assign_proc : process(icmp_ln16_fu_238_p2, p_V_load_2_load_fu_249_p1, ap_phi_reg_pp0_iter1_data_V_2_reg_162, tmp_num0_fu_257_p1, p_V_fu_84, empty_15_fu_100, empty_16_fu_104, empty_17_fu_108)
    begin
        if ((icmp_ln16_fu_238_p2 = ap_const_lv1_0)) then
            if ((p_V_load_2_load_fu_249_p1 = ap_const_lv2_2)) then 
                ap_phi_mux_data_V_2_phi_fu_165_p8 <= empty_16_fu_104;
            elsif ((p_V_load_2_load_fu_249_p1 = ap_const_lv2_1)) then 
                ap_phi_mux_data_V_2_phi_fu_165_p8 <= empty_17_fu_108;
            elsif ((p_V_fu_84 = ap_const_lv2_0)) then 
                ap_phi_mux_data_V_2_phi_fu_165_p8 <= tmp_num0_fu_257_p1;
            elsif ((p_V_load_2_load_fu_249_p1 = ap_const_lv2_3)) then 
                ap_phi_mux_data_V_2_phi_fu_165_p8 <= empty_15_fu_100;
            else 
                ap_phi_mux_data_V_2_phi_fu_165_p8 <= ap_phi_reg_pp0_iter1_data_V_2_reg_162;
            end if;
        else 
            ap_phi_mux_data_V_2_phi_fu_165_p8 <= ap_phi_reg_pp0_iter1_data_V_2_reg_162;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_data_V_2_reg_162 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op40_read_state2_assign_proc : process(icmp_ln16_fu_238_p2, p_V_fu_84)
    begin
                ap_predicate_op40_read_state2 <= ((p_V_fu_84 = ap_const_lv2_0) and (icmp_ln16_fu_238_p2 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln356_fu_333_p1 <= p_Result_s_fu_325_p3;
    bitcast_ln35_fu_348_p1 <= grp_fu_471_p_dout0;

    grp_fu_175_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_175_ce <= ap_const_logic_1;
        else 
            grp_fu_175_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_178_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_178_ce <= ap_const_logic_1;
        else 
            grp_fu_178_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_471_p_ce <= grp_fu_175_ce;
    grp_fu_471_p_din0 <= bitcast_ln356_fu_333_p1;
    grp_fu_474_p_ce <= grp_fu_178_ce;
    grp_fu_474_p_din0 <= grp_fu_471_p_dout0;
    grp_fu_474_p_din1 <= ap_const_lv64_3EB0C6F7A0B5ED8D;
    grp_fu_474_p_opcode <= ap_const_lv5_2;
    i_cast1_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_92),64));
    i_cast_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_92),32));
    icmp_ln16_fu_238_p2 <= "1" when (i_cast_fu_234_p1 = mul) else "0";
    icmp_ln35_1_fu_372_p2 <= "1" when (trunc_ln35_fu_362_p1 = ap_const_lv52_0) else "0";
    icmp_ln35_fu_366_p2 <= "0" when (tmp_4_fu_352_p4 = ap_const_lv11_7FF) else "1";

    in_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, in_r_TVALID, ap_predicate_op40_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op40_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_TDATA_blk_n <= in_r_TVALID;
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op40_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op40_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_TREADY <= ap_const_logic_1;
        else 
            in_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    matrix_address0 <= i_cast1_fu_252_p1(14 - 1 downto 0);

    matrix_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            matrix_ce0 <= ap_const_logic_1;
        else 
            matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    matrix_d0 <= ap_phi_mux_data_V_2_phi_fu_165_p8;

    matrix_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln16_fu_238_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln16_fu_238_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            matrix_we0 <= ap_const_logic_1;
        else 
            matrix_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln35_fu_384_p2 <= (icmp_ln35_reg_504 or icmp_ln35_1_reg_509);
    p_Result_s_fu_325_p3 <= (ap_const_lv1_0 & trunc_ln368_fu_321_p1);
    p_V_3_fu_310_p2 <= std_logic_vector(unsigned(p_V_fu_84) + unsigned(ap_const_lv2_1));
    p_V_load_2_load_fu_249_p1 <= p_V_fu_84;
    select_ln35_1_fu_408_p3 <= 
        add_ln35_fu_394_p2 when (and_ln35_fu_388_p2(0) = '1') else 
        empty_fu_88;
    select_ln35_fu_400_p3 <= 
        add_ln35_fu_394_p2 when (and_ln35_fu_388_p2(0) = '1') else 
        L_0_fu_96;
    tmp_4_fu_352_p4 <= bitcast_ln35_fu_348_p1(62 downto 52);
    tmp_num0_fu_257_p1 <= in_r_TDATA(32 - 1 downto 0);
    trunc_ln35_fu_362_p1 <= bitcast_ln35_fu_348_p1(52 - 1 downto 0);
    trunc_ln368_fu_321_p1 <= ap_phi_mux_data_V_2_phi_fu_165_p8(31 - 1 downto 0);
end behav;
