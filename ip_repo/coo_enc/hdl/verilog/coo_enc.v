// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="coo_enc_coo_enc,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.662000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=1910,HLS_SYN_LUT=2733,HLS_VERSION=2022_1}" *)

module coo_enc (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
output  [127:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] N_reg_63;
wire    ap_CS_fsm_state3;
reg   [31:0] M_reg_68;
reg   [31:0] L_reg_73;
reg   [13:0] a_address0;
reg    a_ce0;
reg    a_we0;
wire   [31:0] a_q0;
wire    grp_inputMatrix_fu_34_ap_start;
wire    grp_inputMatrix_fu_34_ap_done;
wire    grp_inputMatrix_fu_34_ap_idle;
wire    grp_inputMatrix_fu_34_ap_ready;
wire    grp_inputMatrix_fu_34_in_r_TREADY;
wire   [13:0] grp_inputMatrix_fu_34_matrix_address0;
wire    grp_inputMatrix_fu_34_matrix_ce0;
wire    grp_inputMatrix_fu_34_matrix_we0;
wire   [31:0] grp_inputMatrix_fu_34_matrix_d0;
wire   [31:0] grp_inputMatrix_fu_34_ap_return_0;
wire   [31:0] grp_inputMatrix_fu_34_ap_return_1;
wire   [31:0] grp_inputMatrix_fu_34_ap_return_2;
wire   [31:0] grp_inputMatrix_fu_34_grp_fu_78_p_din0;
wire    grp_inputMatrix_fu_34_grp_fu_78_p_ce;
wire   [63:0] grp_inputMatrix_fu_34_grp_fu_81_p_din0;
wire   [63:0] grp_inputMatrix_fu_34_grp_fu_81_p_din1;
wire   [4:0] grp_inputMatrix_fu_34_grp_fu_81_p_opcode;
wire    grp_inputMatrix_fu_34_grp_fu_81_p_ce;
wire    grp_outputMatrix_fu_41_ap_start;
wire    grp_outputMatrix_fu_41_ap_done;
wire    grp_outputMatrix_fu_41_ap_idle;
wire    grp_outputMatrix_fu_41_ap_ready;
wire   [127:0] grp_outputMatrix_fu_41_out_r_TDATA;
wire    grp_outputMatrix_fu_41_out_r_TVALID;
wire    grp_outputMatrix_fu_41_out_r_TREADY;
wire   [13:0] grp_outputMatrix_fu_41_matrix_address0;
wire    grp_outputMatrix_fu_41_matrix_ce0;
wire   [31:0] grp_outputMatrix_fu_41_grp_fu_78_p_din0;
wire    grp_outputMatrix_fu_41_grp_fu_78_p_ce;
wire   [63:0] grp_outputMatrix_fu_41_grp_fu_81_p_din0;
wire   [63:0] grp_outputMatrix_fu_41_grp_fu_81_p_din1;
wire   [4:0] grp_outputMatrix_fu_41_grp_fu_81_p_opcode;
wire    grp_outputMatrix_fu_41_grp_fu_81_p_ce;
reg    grp_inputMatrix_fu_34_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_outputMatrix_fu_41_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [63:0] grp_fu_78_p1;
reg   [31:0] grp_fu_78_p0;
reg    grp_fu_78_ce;
wire   [0:0] grp_fu_81_p2;
reg   [63:0] grp_fu_81_p0;
reg   [63:0] grp_fu_81_p1;
reg    grp_fu_81_ce;
reg   [4:0] grp_fu_81_opcode;
wire    ap_CS_fsm_state6;
wire    regslice_both_out_r_U_apdone_blk;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    regslice_both_in_r_U_apdone_blk;
wire   [127:0] in_r_TDATA_int_regslice;
wire    in_r_TVALID_int_regslice;
reg    in_r_TREADY_int_regslice;
wire    regslice_both_in_r_U_ack_in;
wire    out_r_TREADY_int_regslice;
wire    regslice_both_out_r_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_inputMatrix_fu_34_ap_start_reg = 1'b0;
#0 grp_outputMatrix_fu_41_ap_start_reg = 1'b0;
end

coo_enc_a_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
a_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(a_address0),
    .ce0(a_ce0),
    .we0(a_we0),
    .d0(grp_inputMatrix_fu_34_matrix_d0),
    .q0(a_q0)
);

coo_enc_inputMatrix grp_inputMatrix_fu_34(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_inputMatrix_fu_34_ap_start),
    .ap_done(grp_inputMatrix_fu_34_ap_done),
    .ap_idle(grp_inputMatrix_fu_34_ap_idle),
    .ap_ready(grp_inputMatrix_fu_34_ap_ready),
    .in_r_TDATA(in_r_TDATA_int_regslice),
    .in_r_TVALID(in_r_TVALID_int_regslice),
    .in_r_TREADY(grp_inputMatrix_fu_34_in_r_TREADY),
    .matrix_address0(grp_inputMatrix_fu_34_matrix_address0),
    .matrix_ce0(grp_inputMatrix_fu_34_matrix_ce0),
    .matrix_we0(grp_inputMatrix_fu_34_matrix_we0),
    .matrix_d0(grp_inputMatrix_fu_34_matrix_d0),
    .ap_return_0(grp_inputMatrix_fu_34_ap_return_0),
    .ap_return_1(grp_inputMatrix_fu_34_ap_return_1),
    .ap_return_2(grp_inputMatrix_fu_34_ap_return_2),
    .grp_fu_78_p_din0(grp_inputMatrix_fu_34_grp_fu_78_p_din0),
    .grp_fu_78_p_dout0(grp_fu_78_p1),
    .grp_fu_78_p_ce(grp_inputMatrix_fu_34_grp_fu_78_p_ce),
    .grp_fu_81_p_din0(grp_inputMatrix_fu_34_grp_fu_81_p_din0),
    .grp_fu_81_p_din1(grp_inputMatrix_fu_34_grp_fu_81_p_din1),
    .grp_fu_81_p_opcode(grp_inputMatrix_fu_34_grp_fu_81_p_opcode),
    .grp_fu_81_p_dout0(grp_fu_81_p2),
    .grp_fu_81_p_ce(grp_inputMatrix_fu_34_grp_fu_81_p_ce)
);

coo_enc_outputMatrix grp_outputMatrix_fu_41(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_outputMatrix_fu_41_ap_start),
    .ap_done(grp_outputMatrix_fu_41_ap_done),
    .ap_idle(grp_outputMatrix_fu_41_ap_idle),
    .ap_ready(grp_outputMatrix_fu_41_ap_ready),
    .out_r_TDATA(grp_outputMatrix_fu_41_out_r_TDATA),
    .out_r_TVALID(grp_outputMatrix_fu_41_out_r_TVALID),
    .out_r_TREADY(grp_outputMatrix_fu_41_out_r_TREADY),
    .matrix_address0(grp_outputMatrix_fu_41_matrix_address0),
    .matrix_ce0(grp_outputMatrix_fu_41_matrix_ce0),
    .matrix_q0(a_q0),
    .N(N_reg_63),
    .M(M_reg_68),
    .L(L_reg_73),
    .grp_fu_78_p_din0(grp_outputMatrix_fu_41_grp_fu_78_p_din0),
    .grp_fu_78_p_dout0(grp_fu_78_p1),
    .grp_fu_78_p_ce(grp_outputMatrix_fu_41_grp_fu_78_p_ce),
    .grp_fu_81_p_din0(grp_outputMatrix_fu_41_grp_fu_81_p_din0),
    .grp_fu_81_p_din1(grp_outputMatrix_fu_41_grp_fu_81_p_din1),
    .grp_fu_81_p_opcode(grp_outputMatrix_fu_41_grp_fu_81_p_opcode),
    .grp_fu_81_p_dout0(grp_fu_81_p2),
    .grp_fu_81_p_ce(grp_outputMatrix_fu_41_grp_fu_81_p_ce)
);

coo_enc_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U48(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_78_p0),
    .ce(grp_fu_78_ce),
    .dout(grp_fu_78_p1)
);

coo_enc_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U49(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_81_p0),
    .din1(grp_fu_81_p1),
    .ce(grp_fu_81_ce),
    .opcode(grp_fu_81_opcode),
    .dout(grp_fu_81_p2)
);

coo_enc_regslice_both #(
    .DataWidth( 128 ))
regslice_both_in_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TDATA),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_r_U_ack_in),
    .data_out(in_r_TDATA_int_regslice),
    .vld_out(in_r_TVALID_int_regslice),
    .ack_out(in_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_r_U_apdone_blk)
);

coo_enc_regslice_both #(
    .DataWidth( 128 ))
regslice_both_out_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_outputMatrix_fu_41_out_r_TDATA),
    .vld_in(grp_outputMatrix_fu_41_out_r_TVALID),
    .ack_in(out_r_TREADY_int_regslice),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_r_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_r_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_inputMatrix_fu_34_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_inputMatrix_fu_34_ap_start_reg <= 1'b1;
        end else if ((grp_inputMatrix_fu_34_ap_ready == 1'b1)) begin
            grp_inputMatrix_fu_34_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_outputMatrix_fu_41_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_outputMatrix_fu_41_ap_start_reg <= 1'b1;
        end else if ((grp_outputMatrix_fu_41_ap_ready == 1'b1)) begin
            grp_outputMatrix_fu_41_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        L_reg_73 <= grp_inputMatrix_fu_34_ap_return_2;
        M_reg_68 <= grp_inputMatrix_fu_34_ap_return_1;
        N_reg_63 <= grp_inputMatrix_fu_34_ap_return_0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_address0 = grp_outputMatrix_fu_41_matrix_address0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address0 = grp_inputMatrix_fu_34_matrix_address0;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_ce0 = grp_outputMatrix_fu_41_matrix_ce0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_ce0 = grp_inputMatrix_fu_34_matrix_ce0;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_we0 = grp_inputMatrix_fu_34_matrix_we0;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_inputMatrix_fu_34_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_outputMatrix_fu_41_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_out_r_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (regslice_both_out_r_U_apdone_blk == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (regslice_both_out_r_U_apdone_blk == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_78_ce = grp_outputMatrix_fu_41_grp_fu_78_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_78_ce = grp_inputMatrix_fu_34_grp_fu_78_p_ce;
    end else begin
        grp_fu_78_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_78_p0 = grp_outputMatrix_fu_41_grp_fu_78_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_78_p0 = grp_inputMatrix_fu_34_grp_fu_78_p_din0;
    end else begin
        grp_fu_78_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_81_ce = grp_outputMatrix_fu_41_grp_fu_81_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_81_ce = grp_inputMatrix_fu_34_grp_fu_81_p_ce;
    end else begin
        grp_fu_81_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_81_opcode = grp_outputMatrix_fu_41_grp_fu_81_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_81_opcode = grp_inputMatrix_fu_34_grp_fu_81_p_opcode;
    end else begin
        grp_fu_81_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_81_p0 = grp_outputMatrix_fu_41_grp_fu_81_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_81_p0 = grp_inputMatrix_fu_34_grp_fu_81_p_din0;
    end else begin
        grp_fu_81_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_81_p1 = grp_outputMatrix_fu_41_grp_fu_81_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_81_p1 = grp_inputMatrix_fu_34_grp_fu_81_p_din1;
    end else begin
        grp_fu_81_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_r_TREADY_int_regslice = grp_inputMatrix_fu_34_in_r_TREADY;
    end else begin
        in_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_inputMatrix_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_outputMatrix_fu_41_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (regslice_both_out_r_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_inputMatrix_fu_34_ap_start = grp_inputMatrix_fu_34_ap_start_reg;

assign grp_outputMatrix_fu_41_ap_start = grp_outputMatrix_fu_41_ap_start_reg;

assign grp_outputMatrix_fu_41_out_r_TREADY = (out_r_TREADY_int_regslice & ap_CS_fsm_state5);

assign in_r_TREADY = regslice_both_in_r_U_ack_in;

assign out_r_TVALID = regslice_both_out_r_U_vld_out;


reg find_kernel_block = 0;
// synthesis translate_off
`include "coo_enc_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //coo_enc

