-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity coo_dec_coo_dec_Pipeline_VITIS_LOOP_16_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_TVALID : IN STD_LOGIC;
    tmp_num1_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_num2_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_num3 : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_i : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    in_r_TREADY : OUT STD_LOGIC;
    trunc_ln : IN STD_LOGIC_VECTOR (13 downto 0);
    a_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_we0 : OUT STD_LOGIC;
    a_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of coo_dec_coo_dec_Pipeline_VITIS_LOOP_16_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln16_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_V_load_2_load_fu_274_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_predicate_op42_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal dc_reg_185 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_185_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal dc_reg_185_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln16_reg_751 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_751_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_751_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal q_V_load_reg_764 : STD_LOGIC_VECTOR (1 downto 0);
    signal q_V_load_reg_764_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal q_V_load_reg_764_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_dc_phi_fu_189_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_dc_reg_185 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num0_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_q_V_1_phi_fu_203_p6 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_reg_pp0_iter1_q_V_1_reg_200 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln46_fu_674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal q_V_fu_104 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal p_V_fu_108 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_V_2_fu_356_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_fu_112 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_2_fu_268_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal num_1_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num3_4_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_2_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num2_2_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num1_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num1_4_fu_303_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_fu_494_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_6_fu_661_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln20_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_293_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_307_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_321_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_fu_362_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_384_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_fu_388_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xs_exp_V_fu_374_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_fu_402_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_fu_406_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_fu_420_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_412_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_fu_426_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_430_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1488_fu_438_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_398_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_fu_442_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_446_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_6_fu_458_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_452_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_470_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_fu_480_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_366_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_1_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_1_fu_529_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_fu_551_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_1_fu_555_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xs_exp_V_1_fu_541_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_1_fu_569_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_1_fu_573_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_1_fu_587_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_1_fu_579_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_1_fu_593_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_1_fu_597_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1488_1_fu_605_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_1_fu_565_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_1_fu_609_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_2_fu_613_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_10_fu_625_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_619_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_1_fu_633_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_637_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_1_fu_647_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_fu_533_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_4_fu_655_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln46_fu_674_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_678_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_678_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_678_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_678_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_150 : BOOLEAN;
    signal ap_condition_557 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component coo_dec_mac_muladd_14s_14s_14ns_14_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component coo_dec_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_14s_14s_14ns_14_4_1_U2 : component coo_dec_mac_muladd_14s_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_678_p0,
        din1 => trunc_ln,
        din2 => grp_fu_678_p2,
        ce => grp_fu_678_ce,
        dout => grp_fu_678_p3);

    flow_control_loop_pipe_sequential_init_U : component coo_dec_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    dc_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_150)) then
                if (((p_V_load_2_load_fu_274_p1 = ap_const_lv2_2) and (icmp_ln16_fu_263_p2 = ap_const_lv1_1))) then 
                    dc_reg_185 <= num_2_fu_120;
                elsif (((p_V_load_2_load_fu_274_p1 = ap_const_lv2_1) and (icmp_ln16_fu_263_p2 = ap_const_lv1_1))) then 
                    dc_reg_185 <= tmp_num1_fu_124;
                elsif (((p_V_fu_108 = ap_const_lv2_0) and (icmp_ln16_fu_263_p2 = ap_const_lv1_1))) then 
                    dc_reg_185 <= tmp_num0_fu_288_p1;
                elsif (((p_V_load_2_load_fu_274_p1 = ap_const_lv2_3) and (icmp_ln16_fu_263_p2 = ap_const_lv1_1))) then 
                    dc_reg_185 <= num_1_fu_116;
                elsif (not((icmp_ln16_fu_263_p2 = ap_const_lv1_0))) then 
                    dc_reg_185 <= ap_phi_reg_pp0_iter1_dc_reg_185;
                end if;
            end if; 
        end if;
    end process;

    i_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_112 <= ap_const_lv31_0;
                elsif (((icmp_ln16_fu_263_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_112 <= i_2_fu_268_p2;
                end if;
            end if; 
        end if;
    end process;

    num_1_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    num_1_fu_116 <= tmp_num3;
                elsif ((ap_const_boolean_1 = ap_condition_557)) then 
                    num_1_fu_116 <= tmp_num3_4_fu_331_p1;
                end if;
            end if; 
        end if;
    end process;

    num_2_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    num_2_fu_120 <= tmp_num2_7;
                elsif ((ap_const_boolean_1 = ap_condition_557)) then 
                    num_2_fu_120 <= tmp_num2_2_fu_317_p1;
                end if;
            end if; 
        end if;
    end process;

    p_V_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_V_fu_108 <= ap_const_lv2_3;
                elsif (((icmp_ln16_fu_263_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    p_V_fu_108 <= p_V_2_fu_356_p2;
                end if;
            end if; 
        end if;
    end process;

    q_V_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    q_V_fu_104 <= ap_const_lv2_0;
                elsif (((icmp_ln16_fu_263_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    q_V_fu_104 <= ap_phi_mux_q_V_1_phi_fu_203_p6;
                end if;
            end if; 
        end if;
    end process;

    tmp_num1_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    tmp_num1_fu_124 <= tmp_num1_8;
                elsif ((ap_const_boolean_1 = ap_condition_557)) then 
                    tmp_num1_fu_124 <= tmp_num1_4_fu_303_p1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln16_reg_751 <= icmp_ln16_fu_263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                dc_reg_185_pp0_iter2_reg <= dc_reg_185;
                dc_reg_185_pp0_iter3_reg <= dc_reg_185_pp0_iter2_reg;
                icmp_ln16_reg_751_pp0_iter2_reg <= icmp_ln16_reg_751;
                icmp_ln16_reg_751_pp0_iter3_reg <= icmp_ln16_reg_751_pp0_iter2_reg;
                q_V_load_reg_764_pp0_iter2_reg <= q_V_load_reg_764;
                q_V_load_reg_764_pp0_iter3_reg <= q_V_load_reg_764_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (q_V_load_reg_764_pp0_iter2_reg = ap_const_lv2_1) and (icmp_ln16_reg_751_pp0_iter2_reg = ap_const_lv1_1))) then
                col_fu_132 <= result_V_6_fu_661_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln16_fu_263_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                q_V_load_reg_764 <= q_V_fu_104;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln16_fu_263_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (q_V_fu_104 = ap_const_lv2_0))) then
                row_fu_128 <= result_V_fu_494_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    a_address0 <= zext_ln46_fu_674_p1(14 - 1 downto 0);

    a_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_d0 <= dc_reg_185_pp0_iter3_reg;

    a_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, icmp_ln16_reg_751_pp0_iter3_reg, q_V_load_reg_764_pp0_iter3_reg)
    begin
        if ((not((q_V_load_reg_764_pp0_iter3_reg = ap_const_lv2_1)) and not((q_V_load_reg_764_pp0_iter3_reg = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln16_reg_751_pp0_iter3_reg = ap_const_lv1_1))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln346_1_fu_573_p2 <= std_logic_vector(unsigned(zext_ln346_1_fu_569_p1) + unsigned(ap_const_lv9_181));
    add_ln346_fu_406_p2 <= std_logic_vector(unsigned(zext_ln346_fu_402_p1) + unsigned(ap_const_lv9_181));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, in_r_TVALID, ap_predicate_op42_read_state2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_predicate_op42_read_state2 = ap_const_boolean_1) and (in_r_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, in_r_TVALID, ap_predicate_op42_read_state2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_predicate_op42_read_state2 = ap_const_boolean_1) and (in_r_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(in_r_TVALID, ap_predicate_op42_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op42_read_state2 = ap_const_boolean_1) and (in_r_TVALID = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_150_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_150 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_557_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln16_fu_263_p2, p_V_fu_108)
    begin
                ap_condition_557 <= ((p_V_fu_108 = ap_const_lv2_0) and (icmp_ln16_fu_263_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln16_fu_263_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln16_fu_263_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_dc_phi_fu_189_p8_assign_proc : process(icmp_ln16_fu_263_p2, p_V_load_2_load_fu_274_p1, ap_phi_reg_pp0_iter1_dc_reg_185, tmp_num0_fu_288_p1, p_V_fu_108, num_1_fu_116, num_2_fu_120, tmp_num1_fu_124)
    begin
        if ((icmp_ln16_fu_263_p2 = ap_const_lv1_1)) then
            if ((p_V_load_2_load_fu_274_p1 = ap_const_lv2_2)) then 
                ap_phi_mux_dc_phi_fu_189_p8 <= num_2_fu_120;
            elsif ((p_V_load_2_load_fu_274_p1 = ap_const_lv2_1)) then 
                ap_phi_mux_dc_phi_fu_189_p8 <= tmp_num1_fu_124;
            elsif ((p_V_fu_108 = ap_const_lv2_0)) then 
                ap_phi_mux_dc_phi_fu_189_p8 <= tmp_num0_fu_288_p1;
            elsif ((p_V_load_2_load_fu_274_p1 = ap_const_lv2_3)) then 
                ap_phi_mux_dc_phi_fu_189_p8 <= num_1_fu_116;
            else 
                ap_phi_mux_dc_phi_fu_189_p8 <= ap_phi_reg_pp0_iter1_dc_reg_185;
            end if;
        else 
            ap_phi_mux_dc_phi_fu_189_p8 <= ap_phi_reg_pp0_iter1_dc_reg_185;
        end if; 
    end process;


    ap_phi_mux_q_V_1_phi_fu_203_p6_assign_proc : process(icmp_ln16_fu_263_p2, ap_phi_reg_pp0_iter1_q_V_1_reg_200, q_V_fu_104)
    begin
        if ((icmp_ln16_fu_263_p2 = ap_const_lv1_1)) then
            if ((not((q_V_fu_104 = ap_const_lv2_0)) and not((q_V_fu_104 = ap_const_lv2_1)))) then 
                ap_phi_mux_q_V_1_phi_fu_203_p6 <= ap_const_lv2_0;
            elsif ((q_V_fu_104 = ap_const_lv2_0)) then 
                ap_phi_mux_q_V_1_phi_fu_203_p6 <= ap_const_lv2_1;
            elsif ((q_V_fu_104 = ap_const_lv2_1)) then 
                ap_phi_mux_q_V_1_phi_fu_203_p6 <= ap_const_lv2_2;
            else 
                ap_phi_mux_q_V_1_phi_fu_203_p6 <= ap_phi_reg_pp0_iter1_q_V_1_reg_200;
            end if;
        else 
            ap_phi_mux_q_V_1_phi_fu_203_p6 <= ap_phi_reg_pp0_iter1_q_V_1_reg_200;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_dc_reg_185 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_q_V_1_reg_200 <= "XX";

    ap_predicate_op42_read_state2_assign_proc : process(icmp_ln16_fu_263_p2, p_V_fu_108)
    begin
                ap_predicate_op42_read_state2 <= ((p_V_fu_108 = ap_const_lv2_0) and (icmp_ln16_fu_263_p2 = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    data_V_1_fu_529_p1 <= dc_reg_185_pp0_iter2_reg;
    data_V_fu_362_p1 <= ap_phi_mux_dc_phi_fu_189_p8;

    grp_fu_678_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_678_ce <= ap_const_logic_1;
        else 
            grp_fu_678_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_678_p0 <= row_fu_128(14 - 1 downto 0);
    grp_fu_678_p2 <= col_fu_132(14 - 1 downto 0);
    i_2_fu_268_p2 <= std_logic_vector(unsigned(i_fu_112) + unsigned(ap_const_lv31_1));
    i_cast_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_112),32));
    icmp_ln16_fu_263_p2 <= "1" when (signed(i_cast_fu_259_p1) < signed(mul_i)) else "0";

    in_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, in_r_TVALID, ap_predicate_op42_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op42_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_TDATA_blk_n <= in_r_TVALID;
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op42_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op42_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_TREADY <= ap_const_logic_1;
        else 
            in_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_1_fu_579_p3 <= add_ln346_1_fu_573_p2(8 downto 8);
    isNeg_fu_412_p3 <= add_ln346_fu_406_p2(8 downto 8);
    mantissa_1_fu_555_p4 <= ((ap_const_lv1_1 & p_Result_3_fu_551_p1) & ap_const_lv1_0);
    mantissa_fu_388_p4 <= ((ap_const_lv1_1 & p_Result_1_fu_384_p1) & ap_const_lv1_0);
    p_Result_1_fu_384_p1 <= data_V_fu_362_p1(23 - 1 downto 0);
    p_Result_2_fu_533_p3 <= data_V_1_fu_529_p1(31 downto 31);
    p_Result_3_fu_551_p1 <= data_V_1_fu_529_p1(23 - 1 downto 0);
    p_Result_s_fu_366_p3 <= data_V_fu_362_p1(31 downto 31);
    p_V_2_fu_356_p2 <= std_logic_vector(unsigned(p_V_fu_108) + unsigned(ap_const_lv2_1));
    p_V_load_2_load_fu_274_p1 <= p_V_fu_108;
    r_V_1_fu_452_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_398_p1),to_integer(unsigned('0' & zext_ln1488_fu_442_p1(31-1 downto 0)))));
    r_V_2_fu_613_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_1_fu_565_p1),to_integer(unsigned('0' & zext_ln1488_1_fu_609_p1(31-1 downto 0)))));
    r_V_3_fu_619_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_1_fu_565_p1),to_integer(unsigned('0' & zext_ln1488_1_fu_609_p1(31-1 downto 0)))));
    r_V_fu_446_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_398_p1),to_integer(unsigned('0' & zext_ln1488_fu_442_p1(31-1 downto 0)))));
    result_V_1_fu_488_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_fu_480_p3));
    result_V_4_fu_655_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_1_fu_647_p3));
    result_V_6_fu_661_p3 <= 
        result_V_4_fu_655_p2 when (p_Result_2_fu_533_p3(0) = '1') else 
        val_1_fu_647_p3;
    result_V_fu_494_p3 <= 
        result_V_1_fu_488_p2 when (p_Result_s_fu_366_p3(0) = '1') else 
        val_fu_480_p3;
        sext_ln1488_1_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_597_p3),32));

        sext_ln1488_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_430_p3),32));

        sext_ln1512_1_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_1_fu_587_p2),9));

        sext_ln1512_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_fu_420_p2),9));

    sub_ln1512_1_fu_587_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_1_fu_541_p4));
    sub_ln1512_fu_420_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_fu_374_p4));
    tmp_10_fu_625_p3 <= r_V_2_fu_613_p2(24 downto 24);
    tmp_1_fu_307_p4 <= in_r_TDATA(95 downto 64);
    tmp_2_fu_321_p4 <= in_r_TDATA(127 downto 96);
    tmp_3_fu_470_p4 <= r_V_1_fu_452_p2(55 downto 24);
    tmp_4_fu_637_p4 <= r_V_3_fu_619_p2(55 downto 24);
    tmp_6_fu_458_p3 <= r_V_fu_446_p2(24 downto 24);
    tmp_num0_fu_288_p1 <= trunc_ln20_fu_284_p1;
    tmp_num1_4_fu_303_p1 <= tmp_s_fu_293_p4;
    tmp_num2_2_fu_317_p1 <= tmp_1_fu_307_p4;
    tmp_num3_4_fu_331_p1 <= tmp_2_fu_321_p4;
    tmp_s_fu_293_p4 <= in_r_TDATA(63 downto 32);
    trunc_ln20_fu_284_p1 <= in_r_TDATA(32 - 1 downto 0);
    ush_1_fu_597_p3 <= 
        sext_ln1512_1_fu_593_p1 when (isNeg_1_fu_579_p3(0) = '1') else 
        add_ln346_1_fu_573_p2;
    ush_fu_430_p3 <= 
        sext_ln1512_fu_426_p1 when (isNeg_fu_412_p3(0) = '1') else 
        add_ln346_fu_406_p2;
    val_1_fu_647_p3 <= 
        zext_ln818_1_fu_633_p1 when (isNeg_1_fu_579_p3(0) = '1') else 
        tmp_4_fu_637_p4;
    val_fu_480_p3 <= 
        zext_ln818_fu_466_p1 when (isNeg_fu_412_p3(0) = '1') else 
        tmp_3_fu_470_p4;
    xs_exp_V_1_fu_541_p4 <= data_V_1_fu_529_p1(30 downto 23);
    xs_exp_V_fu_374_p4 <= data_V_fu_362_p1(30 downto 23);
    zext_ln1488_1_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_1_fu_605_p1),79));
    zext_ln1488_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_438_p1),79));
    zext_ln15_1_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_555_p4),79));
    zext_ln15_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_388_p4),79));
    zext_ln346_1_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_1_fu_541_p4),9));
    zext_ln346_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_fu_374_p4),9));
    zext_ln46_fu_674_p0 <= grp_fu_678_p3;
    zext_ln46_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln46_fu_674_p0),64));
    zext_ln818_1_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_625_p3),32));
    zext_ln818_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_458_p3),32));
end behav;
