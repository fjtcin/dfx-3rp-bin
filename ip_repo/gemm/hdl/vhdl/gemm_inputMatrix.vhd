-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gemm_inputMatrix is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    matrix_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    matrix_ce0 : OUT STD_LOGIC;
    matrix_we0 : OUT STD_LOGIC;
    matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of gemm_inputMatrix is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal data_V_reg_429 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_434 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_439 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_fu_252_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_reg_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_7_fu_394_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_7_reg_450 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num1_fu_402_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num1_reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_num2_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num2_reg_461 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num3_fu_410_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num3_reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_fu_414_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_start : STD_LOGIC;
    signal grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_done : STD_LOGIC;
    signal grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_idle : STD_LOGIC;
    signal grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_ready : STD_LOGIC;
    signal grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_in_r_TREADY : STD_LOGIC;
    signal grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_matrix_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_matrix_ce0 : STD_LOGIC;
    signal grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_matrix_we0 : STD_LOGIC;
    signal grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal p_Result_1_fu_142_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_fu_146_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xs_exp_V_fu_132_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_fu_160_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_fu_164_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_fu_178_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_170_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_fu_184_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_188_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1488_fu_196_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_156_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_fu_200_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_204_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_fu_216_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_210_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_fu_224_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_228_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_fu_238_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_124_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_2_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_fu_278_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_1_fu_288_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xs_exp_V_1_fu_268_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_1_fu_302_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_1_fu_306_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_1_fu_320_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_1_fu_312_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_1_fu_326_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_1_fu_330_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1488_1_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_1_fu_298_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_1_fu_342_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_2_fu_346_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_8_fu_358_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_352_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_1_fu_366_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_370_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_1_fu_380_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_fu_260_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_6_fu_388_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gemm_inputMatrix_Pipeline_VITIS_LOOP_15_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_TVALID : IN STD_LOGIC;
        tmp_num1_4 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_num2 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_num3 : IN STD_LOGIC_VECTOR (31 downto 0);
        mul : IN STD_LOGIC_VECTOR (31 downto 0);
        in_r_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        in_r_TREADY : OUT STD_LOGIC;
        matrix_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        matrix_ce0 : OUT STD_LOGIC;
        matrix_we0 : OUT STD_LOGIC;
        matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gemm_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82 : component gemm_inputMatrix_Pipeline_VITIS_LOOP_15_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_start,
        ap_done => grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_done,
        ap_idle => grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_idle,
        ap_ready => grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_ready,
        in_r_TVALID => in_r_TVALID,
        tmp_num1_4 => tmp_num1_reg_456,
        tmp_num2 => tmp_num2_reg_461,
        tmp_num3 => tmp_num3_reg_466,
        mul => mul_reg_471,
        in_r_TDATA => in_r_TDATA,
        in_r_TREADY => grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_in_r_TREADY,
        matrix_address0 => grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_matrix_address0,
        matrix_ce0 => grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_matrix_ce0,
        matrix_we0 => grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_matrix_we0,
        matrix_d0 => grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_matrix_d0);

    mul_32s_32s_32_1_1_U7 : component gemm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => result_V_7_reg_450,
        din1 => result_V_reg_444,
        dout => mul_fu_414_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_ready = ap_const_logic_1)) then 
                    grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                data_V_reg_429 <= in_r_TDATA(63 downto 32);
                result_V_7_reg_450 <= result_V_7_fu_394_p3;
                result_V_reg_444 <= result_V_fu_252_p3;
                tmp_14_reg_439 <= in_r_TDATA(127 downto 96);
                tmp_s_reg_434 <= in_r_TDATA(95 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                mul_reg_471 <= mul_fu_414_p2;
                tmp_num1_reg_456 <= tmp_num1_fu_402_p1;
                tmp_num2_reg_461 <= tmp_num2_fu_406_p1;
                tmp_num3_reg_466 <= tmp_num3_fu_410_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, in_r_TVALID, grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (in_r_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln346_1_fu_306_p2 <= std_logic_vector(unsigned(zext_ln346_1_fu_302_p1) + unsigned(ap_const_lv9_181));
    add_ln346_fu_164_p2 <= std_logic_vector(unsigned(zext_ln346_fu_160_p1) + unsigned(ap_const_lv9_181));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, in_r_TVALID)
    begin
        if (((ap_start = ap_const_logic_0) or (in_r_TVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_done)
    begin
        if ((grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, in_r_TVALID)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (in_r_TVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_done, ap_CS_fsm_state3)
    begin
        if ((((grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= result_V_reg_444;
    ap_return_1 <= result_V_7_reg_450;
    grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_start <= grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_ap_start_reg;

    in_r_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, in_r_TVALID)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_r_TDATA_blk_n <= in_r_TVALID;
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_TREADY_assign_proc : process(ap_start, ap_CS_fsm_state1, in_r_TVALID, grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_in_r_TREADY, ap_CS_fsm_state3)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (in_r_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_r_TREADY <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_r_TREADY <= grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_in_r_TREADY;
        else 
            in_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_1_fu_312_p3 <= add_ln346_1_fu_306_p2(8 downto 8);
    isNeg_fu_170_p3 <= add_ln346_fu_164_p2(8 downto 8);
    mantissa_1_fu_288_p4 <= ((ap_const_lv1_1 & p_Result_3_fu_278_p4) & ap_const_lv1_0);
    mantissa_fu_146_p4 <= ((ap_const_lv1_1 & p_Result_1_fu_142_p1) & ap_const_lv1_0);
    matrix_address0 <= grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_matrix_address0;
    matrix_ce0 <= grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_matrix_ce0;
    matrix_d0 <= grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_matrix_d0;
    matrix_we0 <= grp_inputMatrix_Pipeline_VITIS_LOOP_15_1_fu_82_matrix_we0;
    p_Result_1_fu_142_p1 <= in_r_TDATA(23 - 1 downto 0);
    p_Result_2_fu_260_p3 <= in_r_TDATA(63 downto 63);
    p_Result_3_fu_278_p4 <= in_r_TDATA(54 downto 32);
    p_Result_s_fu_124_p3 <= in_r_TDATA(31 downto 31);
    r_V_1_fu_210_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_156_p1),to_integer(unsigned('0' & zext_ln1488_fu_200_p1(31-1 downto 0)))));
    r_V_2_fu_346_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_1_fu_298_p1),to_integer(unsigned('0' & zext_ln1488_1_fu_342_p1(31-1 downto 0)))));
    r_V_3_fu_352_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_1_fu_298_p1),to_integer(unsigned('0' & zext_ln1488_1_fu_342_p1(31-1 downto 0)))));
    r_V_fu_204_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_156_p1),to_integer(unsigned('0' & zext_ln1488_fu_200_p1(31-1 downto 0)))));
    result_V_2_fu_246_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_fu_238_p3));
    result_V_6_fu_388_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_1_fu_380_p3));
    result_V_7_fu_394_p3 <= 
        result_V_6_fu_388_p2 when (p_Result_2_fu_260_p3(0) = '1') else 
        val_1_fu_380_p3;
    result_V_fu_252_p3 <= 
        result_V_2_fu_246_p2 when (p_Result_s_fu_124_p3(0) = '1') else 
        val_fu_238_p3;
        sext_ln1488_1_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_330_p3),32));

        sext_ln1488_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_188_p3),32));

        sext_ln1512_1_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_1_fu_320_p2),9));

        sext_ln1512_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_fu_178_p2),9));

    sub_ln1512_1_fu_320_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_1_fu_268_p4));
    sub_ln1512_fu_178_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_fu_132_p4));
    tmp_3_fu_228_p4 <= r_V_1_fu_210_p2(55 downto 24);
    tmp_6_fu_370_p4 <= r_V_3_fu_352_p2(55 downto 24);
    tmp_8_fu_358_p3 <= r_V_2_fu_346_p2(24 downto 24);
    tmp_fu_216_p3 <= r_V_fu_204_p2(24 downto 24);
    tmp_num1_fu_402_p1 <= data_V_reg_429;
    tmp_num2_fu_406_p1 <= tmp_s_reg_434;
    tmp_num3_fu_410_p1 <= tmp_14_reg_439;
    ush_1_fu_330_p3 <= 
        sext_ln1512_1_fu_326_p1 when (isNeg_1_fu_312_p3(0) = '1') else 
        add_ln346_1_fu_306_p2;
    ush_fu_188_p3 <= 
        sext_ln1512_fu_184_p1 when (isNeg_fu_170_p3(0) = '1') else 
        add_ln346_fu_164_p2;
    val_1_fu_380_p3 <= 
        zext_ln818_1_fu_366_p1 when (isNeg_1_fu_312_p3(0) = '1') else 
        tmp_6_fu_370_p4;
    val_fu_238_p3 <= 
        zext_ln818_fu_224_p1 when (isNeg_fu_170_p3(0) = '1') else 
        tmp_3_fu_228_p4;
    xs_exp_V_1_fu_268_p4 <= in_r_TDATA(62 downto 55);
    xs_exp_V_fu_132_p4 <= in_r_TDATA(30 downto 23);
    zext_ln1488_1_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_1_fu_338_p1),79));
    zext_ln1488_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_196_p1),79));
    zext_ln15_1_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_288_p4),79));
    zext_ln15_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_146_p4),79));
    zext_ln346_1_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_1_fu_268_p4),9));
    zext_ln346_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_fu_132_p4),9));
    zext_ln818_1_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_358_p3),32));
    zext_ln818_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_216_p3),32));
end behav;
