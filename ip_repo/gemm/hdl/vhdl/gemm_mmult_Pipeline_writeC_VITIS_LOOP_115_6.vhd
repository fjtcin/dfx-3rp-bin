-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gemm_mmult_Pipeline_writeC_VITIS_LOOP_115_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mul_ln19 : IN STD_LOGIC_VECTOR (63 downto 0);
    current_tile_B_cols : IN STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln23_2_mid2 : IN STD_LOGIC_VECTOR (13 downto 0);
    trunc_ln23_1 : IN STD_LOGIC_VECTOR (13 downto 0);
    localC_144 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_145 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_146 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_147 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_148 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_149 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_150 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_151 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_152 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_153 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_154 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_155 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_156 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_157 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_158 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_159 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_160 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_161 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_162 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_163 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_164 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_165 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_166 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_167 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_168 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_169 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_170 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_171 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_172 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_173 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_174 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_175 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_176 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_177 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_178 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_179 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_180 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_181 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_182 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_183 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_184 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_185 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_186 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_187 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_188 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_189 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_190 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_191 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_192 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_193 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_194 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_195 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_196 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_197 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_198 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_199 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_200 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_201 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_202 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_203 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_204 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_205 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_206 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_207 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_208 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_209 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_210 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_211 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_212 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_213 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_214 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_215 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_216 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_217 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_218 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_219 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_220 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_221 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_222 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_223 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_224 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_225 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_226 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_227 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_228 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_229 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_230 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_231 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_232 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_233 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_234 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_235 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_236 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_237 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_238 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_239 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_240 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_241 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_242 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_243 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_244 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_245 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_246 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_247 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_248 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_249 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_250 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_251 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_252 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_253 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_254 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_255 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_256 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_257 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_258 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_259 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_260 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_261 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_262 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_263 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_264 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_265 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_266 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_267 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_268 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_269 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_270 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_271 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_272 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_273 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_274 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_275 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_276 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_277 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_278 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_279 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_280 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_281 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_282 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_283 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_284 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_285 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_286 : IN STD_LOGIC_VECTOR (31 downto 0);
    localC_287 : IN STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln2 : IN STD_LOGIC_VECTOR (13 downto 0);
    c_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_we0 : OUT STD_LOGIC;
    c_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of gemm_mmult_Pipeline_writeC_VITIS_LOOP_115_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln114_fu_1267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_11_fu_1535_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_2373 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_2373_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_2373_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln116_fu_1565_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln116_fu_1565_p2 : signal is "no";
    signal add_ln116_reg_2378 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln116_reg_2378_pp0_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln116_fu_1591_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal c_c_fu_330 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln115_fu_1570_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal r_c_fu_334 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln114_1_fu_1303_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten52_fu_338 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln114_fu_1272_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln115_fu_1284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln114_2_fu_1297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln114_fu_1289_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1319_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1337_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_1355_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1373_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1391_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1409_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1427_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1445_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1463_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1481_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1499_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1517_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_1315_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln116_fu_1591_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1595_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1595_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gemm_mux_1232_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gemm_ama_addmuladd_14ns_14ns_14s_14ns_14_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        din3 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component gemm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_1232_32_1_1_U318 : component gemm_mux_1232_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => localC_144,
        din1 => localC_145,
        din2 => localC_146,
        din3 => localC_147,
        din4 => localC_148,
        din5 => localC_149,
        din6 => localC_150,
        din7 => localC_151,
        din8 => localC_152,
        din9 => localC_153,
        din10 => localC_154,
        din11 => localC_155,
        din12 => select_ln114_fu_1289_p3,
        dout => tmp_fu_1319_p14);

    mux_1232_32_1_1_U319 : component gemm_mux_1232_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => localC_156,
        din1 => localC_157,
        din2 => localC_158,
        din3 => localC_159,
        din4 => localC_160,
        din5 => localC_161,
        din6 => localC_162,
        din7 => localC_163,
        din8 => localC_164,
        din9 => localC_165,
        din10 => localC_166,
        din11 => localC_167,
        din12 => select_ln114_fu_1289_p3,
        dout => tmp_1_fu_1337_p14);

    mux_1232_32_1_1_U320 : component gemm_mux_1232_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => localC_168,
        din1 => localC_169,
        din2 => localC_170,
        din3 => localC_171,
        din4 => localC_172,
        din5 => localC_173,
        din6 => localC_174,
        din7 => localC_175,
        din8 => localC_176,
        din9 => localC_177,
        din10 => localC_178,
        din11 => localC_179,
        din12 => select_ln114_fu_1289_p3,
        dout => tmp_2_fu_1355_p14);

    mux_1232_32_1_1_U321 : component gemm_mux_1232_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => localC_180,
        din1 => localC_181,
        din2 => localC_182,
        din3 => localC_183,
        din4 => localC_184,
        din5 => localC_185,
        din6 => localC_186,
        din7 => localC_187,
        din8 => localC_188,
        din9 => localC_189,
        din10 => localC_190,
        din11 => localC_191,
        din12 => select_ln114_fu_1289_p3,
        dout => tmp_3_fu_1373_p14);

    mux_1232_32_1_1_U322 : component gemm_mux_1232_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => localC_192,
        din1 => localC_193,
        din2 => localC_194,
        din3 => localC_195,
        din4 => localC_196,
        din5 => localC_197,
        din6 => localC_198,
        din7 => localC_199,
        din8 => localC_200,
        din9 => localC_201,
        din10 => localC_202,
        din11 => localC_203,
        din12 => select_ln114_fu_1289_p3,
        dout => tmp_4_fu_1391_p14);

    mux_1232_32_1_1_U323 : component gemm_mux_1232_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => localC_204,
        din1 => localC_205,
        din2 => localC_206,
        din3 => localC_207,
        din4 => localC_208,
        din5 => localC_209,
        din6 => localC_210,
        din7 => localC_211,
        din8 => localC_212,
        din9 => localC_213,
        din10 => localC_214,
        din11 => localC_215,
        din12 => select_ln114_fu_1289_p3,
        dout => tmp_5_fu_1409_p14);

    mux_1232_32_1_1_U324 : component gemm_mux_1232_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => localC_216,
        din1 => localC_217,
        din2 => localC_218,
        din3 => localC_219,
        din4 => localC_220,
        din5 => localC_221,
        din6 => localC_222,
        din7 => localC_223,
        din8 => localC_224,
        din9 => localC_225,
        din10 => localC_226,
        din11 => localC_227,
        din12 => select_ln114_fu_1289_p3,
        dout => tmp_6_fu_1427_p14);

    mux_1232_32_1_1_U325 : component gemm_mux_1232_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => localC_228,
        din1 => localC_229,
        din2 => localC_230,
        din3 => localC_231,
        din4 => localC_232,
        din5 => localC_233,
        din6 => localC_234,
        din7 => localC_235,
        din8 => localC_236,
        din9 => localC_237,
        din10 => localC_238,
        din11 => localC_239,
        din12 => select_ln114_fu_1289_p3,
        dout => tmp_7_fu_1445_p14);

    mux_1232_32_1_1_U326 : component gemm_mux_1232_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => localC_240,
        din1 => localC_241,
        din2 => localC_242,
        din3 => localC_243,
        din4 => localC_244,
        din5 => localC_245,
        din6 => localC_246,
        din7 => localC_247,
        din8 => localC_248,
        din9 => localC_249,
        din10 => localC_250,
        din11 => localC_251,
        din12 => select_ln114_fu_1289_p3,
        dout => tmp_8_fu_1463_p14);

    mux_1232_32_1_1_U327 : component gemm_mux_1232_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => localC_252,
        din1 => localC_253,
        din2 => localC_254,
        din3 => localC_255,
        din4 => localC_256,
        din5 => localC_257,
        din6 => localC_258,
        din7 => localC_259,
        din8 => localC_260,
        din9 => localC_261,
        din10 => localC_262,
        din11 => localC_263,
        din12 => select_ln114_fu_1289_p3,
        dout => tmp_9_fu_1481_p14);

    mux_1232_32_1_1_U328 : component gemm_mux_1232_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => localC_264,
        din1 => localC_265,
        din2 => localC_266,
        din3 => localC_267,
        din4 => localC_268,
        din5 => localC_269,
        din6 => localC_270,
        din7 => localC_271,
        din8 => localC_272,
        din9 => localC_273,
        din10 => localC_274,
        din11 => localC_275,
        din12 => select_ln114_fu_1289_p3,
        dout => tmp_s_fu_1499_p14);

    mux_1232_32_1_1_U329 : component gemm_mux_1232_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => localC_276,
        din1 => localC_277,
        din2 => localC_278,
        din3 => localC_279,
        din4 => localC_280,
        din5 => localC_281,
        din6 => localC_282,
        din7 => localC_283,
        din8 => localC_284,
        din9 => localC_285,
        din10 => localC_286,
        din11 => localC_287,
        din12 => select_ln114_fu_1289_p3,
        dout => tmp_10_fu_1517_p14);

    mux_1232_32_1_1_U330 : component gemm_mux_1232_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_fu_1319_p14,
        din1 => tmp_1_fu_1337_p14,
        din2 => tmp_2_fu_1355_p14,
        din3 => tmp_3_fu_1373_p14,
        din4 => tmp_4_fu_1391_p14,
        din5 => tmp_5_fu_1409_p14,
        din6 => tmp_6_fu_1427_p14,
        din7 => tmp_7_fu_1445_p14,
        din8 => tmp_8_fu_1463_p14,
        din9 => tmp_9_fu_1481_p14,
        din10 => tmp_s_fu_1499_p14,
        din11 => tmp_10_fu_1517_p14,
        din12 => select_ln114_1_fu_1303_p3,
        dout => tmp_11_fu_1535_p14);

    ama_addmuladd_14ns_14ns_14s_14ns_14_4_1_U331 : component gemm_ama_addmuladd_14ns_14ns_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        din3_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1595_p0,
        din1 => trunc_ln23_2_mid2,
        din2 => trunc_ln23_1,
        din3 => add_ln116_reg_2378_pp0_iter2_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_1595_p4);

    flow_control_loop_pipe_sequential_init_U : component gemm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    c_c_fu_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    c_c_fu_330 <= ap_const_lv32_0;
                elsif (((icmp_ln114_fu_1267_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    c_c_fu_330 <= add_ln115_fu_1570_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten52_fu_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten52_fu_338 <= ap_const_lv64_0;
                elsif (((icmp_ln114_fu_1267_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten52_fu_338 <= add_ln114_fu_1272_p2;
                end if;
            end if; 
        end if;
    end process;

    r_c_fu_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    r_c_fu_334 <= ap_const_lv32_0;
                elsif (((icmp_ln114_fu_1267_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    r_c_fu_334 <= select_ln114_1_fu_1303_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln114_fu_1267_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln116_reg_2378 <= add_ln116_fu_1565_p2;
                tmp_11_reg_2373 <= tmp_11_fu_1535_p14;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln116_reg_2378_pp0_iter2_reg <= add_ln116_reg_2378;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                tmp_11_reg_2373_pp0_iter2_reg <= tmp_11_reg_2373;
                tmp_11_reg_2373_pp0_iter3_reg <= tmp_11_reg_2373_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln114_2_fu_1297_p2 <= std_logic_vector(unsigned(r_c_fu_334) + unsigned(ap_const_lv32_1));
    add_ln114_fu_1272_p2 <= std_logic_vector(unsigned(indvar_flatten52_fu_338) + unsigned(ap_const_lv64_1));
    add_ln115_fu_1570_p2 <= std_logic_vector(unsigned(select_ln114_fu_1289_p3) + unsigned(ap_const_lv32_1));
    add_ln116_fu_1565_p2 <= std_logic_vector(unsigned(trunc_ln2) + unsigned(empty_fu_1315_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln114_fu_1267_p2)
    begin
        if (((icmp_ln114_fu_1267_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    c_address0 <= zext_ln116_fu_1591_p1(14 - 1 downto 0);

    c_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_d0 <= tmp_11_reg_2373_pp0_iter3_reg;

    c_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_1315_p1 <= select_ln114_fu_1289_p3(14 - 1 downto 0);
    grp_fu_1595_p0 <= select_ln114_1_fu_1303_p3(14 - 1 downto 0);
    icmp_ln114_fu_1267_p2 <= "1" when (indvar_flatten52_fu_338 = mul_ln19) else "0";
    icmp_ln115_fu_1284_p2 <= "1" when (c_c_fu_330 = current_tile_B_cols) else "0";
    select_ln114_1_fu_1303_p3 <= 
        add_ln114_2_fu_1297_p2 when (icmp_ln115_fu_1284_p2(0) = '1') else 
        r_c_fu_334;
    select_ln114_fu_1289_p3 <= 
        ap_const_lv32_0 when (icmp_ln115_fu_1284_p2(0) = '1') else 
        c_c_fu_330;
    zext_ln116_fu_1591_p0 <= grp_fu_1595_p4;
    zext_ln116_fu_1591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln116_fu_1591_p0),64));
end behav;
