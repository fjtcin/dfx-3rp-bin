-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gemm_inputMatrix_Pipeline_VITIS_LOOP_15_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_TVALID : IN STD_LOGIC;
    tmp_num1_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_num2 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_num3 : IN STD_LOGIC_VECTOR (31 downto 0);
    mul : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    in_r_TREADY : OUT STD_LOGIC;
    matrix_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    matrix_ce0 : OUT STD_LOGIC;
    matrix_we0 : OUT STD_LOGIC;
    matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of gemm_inputMatrix_Pipeline_VITIS_LOOP_15_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln15_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_V_load_1_load_fu_196_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_predicate_op38_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_cast1_fu_199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal matrix_addr_2_gep_fu_129_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal matrix_addr_1_gep_fu_137_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal matrix_addr_gep_fu_145_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_V_fu_66 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_V_1_fu_288_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_70 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln15_fu_190_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_num3_1_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num3_2_fu_262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num2_1_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num2_2_fu_248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num1_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num1_1_fu_234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num0_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_181_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln18_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_224_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_238_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_252_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_113 : BOOLEAN;
    signal ap_condition_238 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component gemm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component gemm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_70 <= ap_const_lv15_0;
                elsif (((icmp_ln15_fu_185_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_70 <= add_ln15_fu_190_p2;
                end if;
            end if; 
        end if;
    end process;

    p_V_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_V_fu_66 <= ap_const_lv2_2;
                elsif (((icmp_ln15_fu_185_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    p_V_fu_66 <= p_V_1_fu_288_p2;
                end if;
            end if; 
        end if;
    end process;

    tmp_num1_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    tmp_num1_fu_82 <= tmp_num1_4;
                elsif ((ap_const_boolean_1 = ap_condition_238)) then 
                    tmp_num1_fu_82 <= tmp_num1_1_fu_234_p1;
                end if;
            end if; 
        end if;
    end process;

    tmp_num2_1_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    tmp_num2_1_fu_78 <= tmp_num2;
                elsif ((ap_const_boolean_1 = ap_condition_238)) then 
                    tmp_num2_1_fu_78 <= tmp_num2_2_fu_248_p1;
                end if;
            end if; 
        end if;
    end process;

    tmp_num3_1_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    tmp_num3_1_fu_74 <= tmp_num3;
                elsif ((ap_const_boolean_1 = ap_condition_238)) then 
                    tmp_num3_1_fu_74 <= tmp_num3_2_fu_262_p1;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln15_fu_190_p2 <= std_logic_vector(unsigned(i_fu_70) + unsigned(ap_const_lv15_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, in_r_TVALID, ap_predicate_op38_read_state2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_predicate_op38_read_state2 = ap_const_boolean_1) and (in_r_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, in_r_TVALID, ap_predicate_op38_read_state2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_predicate_op38_read_state2 = ap_const_boolean_1) and (in_r_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(in_r_TVALID, ap_predicate_op38_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op38_read_state2 = ap_const_boolean_1) and (in_r_TVALID = ap_const_logic_0));
    end process;


    ap_condition_113_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln15_fu_185_p2, ap_block_pp0_stage0)
    begin
                ap_condition_113 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln15_fu_185_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_238_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln15_fu_185_p2, p_V_fu_66)
    begin
                ap_condition_238 <= ((p_V_fu_66 = ap_const_lv2_0) and (icmp_ln15_fu_185_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln15_fu_185_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln15_fu_185_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_predicate_op38_read_state2_assign_proc : process(icmp_ln15_fu_185_p2, p_V_fu_66)
    begin
                ap_predicate_op38_read_state2 <= ((p_V_fu_66 = ap_const_lv2_0) and (icmp_ln15_fu_185_p2 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    i_cast1_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_70),64));
    i_cast_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_70),32));
    icmp_ln15_fu_185_p2 <= "1" when (i_cast_fu_181_p1 = mul) else "0";

    in_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, in_r_TVALID, ap_predicate_op38_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op38_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_TDATA_blk_n <= in_r_TVALID;
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op38_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op38_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_TREADY <= ap_const_logic_1;
        else 
            in_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    matrix_addr_1_gep_fu_137_p3 <= i_cast1_fu_199_p1(14 - 1 downto 0);
    matrix_addr_2_gep_fu_129_p3 <= i_cast1_fu_199_p1(14 - 1 downto 0);
    matrix_addr_gep_fu_145_p3 <= i_cast1_fu_199_p1(14 - 1 downto 0);

    matrix_address0_assign_proc : process(p_V_load_1_load_fu_196_p1, i_cast1_fu_199_p1, matrix_addr_2_gep_fu_129_p3, matrix_addr_1_gep_fu_137_p3, matrix_addr_gep_fu_145_p3, p_V_fu_66, ap_condition_113)
    begin
        if ((ap_const_boolean_1 = ap_condition_113)) then
            if ((p_V_load_1_load_fu_196_p1 = ap_const_lv2_3)) then 
                matrix_address0 <= matrix_addr_gep_fu_145_p3;
            elsif ((p_V_fu_66 = ap_const_lv2_0)) then 
                matrix_address0 <= matrix_addr_1_gep_fu_137_p3;
            elsif ((p_V_load_1_load_fu_196_p1 = ap_const_lv2_1)) then 
                matrix_address0 <= matrix_addr_2_gep_fu_129_p3;
            elsif ((p_V_load_1_load_fu_196_p1 = ap_const_lv2_2)) then 
                matrix_address0 <= i_cast1_fu_199_p1(14 - 1 downto 0);
            else 
                matrix_address0 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            matrix_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    matrix_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln15_fu_185_p2, p_V_load_1_load_fu_196_p1, ap_block_pp0_stage0_11001, p_V_fu_66)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_V_load_1_load_fu_196_p1 = ap_const_lv2_1) and (icmp_ln15_fu_185_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_V_load_1_load_fu_196_p1 = ap_const_lv2_2) and (icmp_ln15_fu_185_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_V_fu_66 = ap_const_lv2_0) and (icmp_ln15_fu_185_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_V_load_1_load_fu_196_p1 = ap_const_lv2_3) and (icmp_ln15_fu_185_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            matrix_ce0 <= ap_const_logic_1;
        else 
            matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matrix_d0_assign_proc : process(p_V_load_1_load_fu_196_p1, p_V_fu_66, tmp_num3_1_fu_74, tmp_num2_1_fu_78, tmp_num1_fu_82, tmp_num0_fu_219_p1, ap_condition_113)
    begin
        if ((ap_const_boolean_1 = ap_condition_113)) then
            if ((p_V_load_1_load_fu_196_p1 = ap_const_lv2_3)) then 
                matrix_d0 <= tmp_num3_1_fu_74;
            elsif ((p_V_fu_66 = ap_const_lv2_0)) then 
                matrix_d0 <= tmp_num0_fu_219_p1;
            elsif ((p_V_load_1_load_fu_196_p1 = ap_const_lv2_1)) then 
                matrix_d0 <= tmp_num1_fu_82;
            elsif ((p_V_load_1_load_fu_196_p1 = ap_const_lv2_2)) then 
                matrix_d0 <= tmp_num2_1_fu_78;
            else 
                matrix_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            matrix_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    matrix_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln15_fu_185_p2, p_V_load_1_load_fu_196_p1, ap_block_pp0_stage0_11001, p_V_fu_66)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_V_load_1_load_fu_196_p1 = ap_const_lv2_1) and (icmp_ln15_fu_185_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_V_load_1_load_fu_196_p1 = ap_const_lv2_2) and (icmp_ln15_fu_185_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_V_fu_66 = ap_const_lv2_0) and (icmp_ln15_fu_185_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_V_load_1_load_fu_196_p1 = ap_const_lv2_3) and (icmp_ln15_fu_185_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            matrix_we0 <= ap_const_logic_1;
        else 
            matrix_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_V_1_fu_288_p2 <= std_logic_vector(unsigned(p_V_fu_66) + unsigned(ap_const_lv2_1));
    p_V_load_1_load_fu_196_p1 <= p_V_fu_66;
    tmp_12_fu_238_p4 <= in_r_TDATA(95 downto 64);
    tmp_13_fu_252_p4 <= in_r_TDATA(127 downto 96);
    tmp_num0_fu_219_p1 <= trunc_ln18_fu_215_p1;
    tmp_num1_1_fu_234_p1 <= tmp_s_fu_224_p4;
    tmp_num2_2_fu_248_p1 <= tmp_12_fu_238_p4;
    tmp_num3_2_fu_262_p1 <= tmp_13_fu_252_p4;
    tmp_s_fu_224_p4 <= in_r_TDATA(63 downto 32);
    trunc_ln18_fu_215_p1 <= in_r_TDATA(32 - 1 downto 0);
end behav;
