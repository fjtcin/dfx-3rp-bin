-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gemm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    out_r_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC );
end;


architecture behav of gemm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "gemm_gemm,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.016000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=90,HLS_SYN_DSP=0,HLS_SYN_FF=32655,HLS_SYN_LUT=35103,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal N_reg_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal K_reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal M_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal mul_i_fu_121_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_104_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num0_reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_108_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num1_reg_211 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_fu_145_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal a_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal a_ce0 : STD_LOGIC;
    signal a_we0 : STD_LOGIC;
    signal a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal b_ce0 : STD_LOGIC;
    signal b_we0 : STD_LOGIC;
    signal b_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_we0 : STD_LOGIC;
    signal c_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inputMatrix_fu_73_ap_start : STD_LOGIC;
    signal grp_inputMatrix_fu_73_ap_done : STD_LOGIC;
    signal grp_inputMatrix_fu_73_ap_idle : STD_LOGIC;
    signal grp_inputMatrix_fu_73_ap_ready : STD_LOGIC;
    signal grp_inputMatrix_fu_73_in_r_TREADY : STD_LOGIC;
    signal grp_inputMatrix_fu_73_matrix_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_inputMatrix_fu_73_matrix_ce0 : STD_LOGIC;
    signal grp_inputMatrix_fu_73_matrix_we0 : STD_LOGIC;
    signal grp_inputMatrix_fu_73_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inputMatrix_fu_73_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inputMatrix_fu_73_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmult_fu_80_ap_start : STD_LOGIC;
    signal grp_mmult_fu_80_ap_done : STD_LOGIC;
    signal grp_mmult_fu_80_ap_idle : STD_LOGIC;
    signal grp_mmult_fu_80_ap_ready : STD_LOGIC;
    signal grp_mmult_fu_80_a_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_mmult_fu_80_a_ce0 : STD_LOGIC;
    signal grp_mmult_fu_80_b_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_mmult_fu_80_b_ce0 : STD_LOGIC;
    signal grp_mmult_fu_80_c_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_mmult_fu_80_c_ce0 : STD_LOGIC;
    signal grp_mmult_fu_80_c_we0 : STD_LOGIC;
    signal grp_mmult_fu_80_c_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_ap_start : STD_LOGIC;
    signal grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_ap_done : STD_LOGIC;
    signal grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_ap_idle : STD_LOGIC;
    signal grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_ap_ready : STD_LOGIC;
    signal grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_out_r_TREADY : STD_LOGIC;
    signal grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_out_r_TDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_out_r_TVALID : STD_LOGIC;
    signal grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_c_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_c_ce0 : STD_LOGIC;
    signal grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_tmp_num0_2_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_tmp_num0_2_out_ap_vld : STD_LOGIC;
    signal grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_tmp_num1_4_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_tmp_num1_4_out_ap_vld : STD_LOGIC;
    signal grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_p_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_p_out_ap_vld : STD_LOGIC;
    signal grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_p_out1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_p_out1_ap_vld : STD_LOGIC;
    signal grp_inputMatrix_fu_73_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_mmult_fu_80_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal bitcast_ln174_1_fu_141_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_fu_137_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_104_ce : STD_LOGIC;
    signal grp_fu_108_ce : STD_LOGIC;
    signal regslice_both_out_r_U_apdone_blk : STD_LOGIC;
    signal ap_block_state11 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal regslice_both_in_r_U_apdone_blk : STD_LOGIC;
    signal in_r_TDATA_int_regslice : STD_LOGIC_VECTOR (127 downto 0);
    signal in_r_TVALID_int_regslice : STD_LOGIC;
    signal in_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_r_U_ack_in : STD_LOGIC;
    signal out_r_TDATA_int_regslice : STD_LOGIC_VECTOR (127 downto 0);
    signal out_r_TVALID_int_regslice : STD_LOGIC;
    signal out_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_r_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gemm_inputMatrix IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        in_r_TVALID : IN STD_LOGIC;
        in_r_TREADY : OUT STD_LOGIC;
        matrix_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        matrix_ce0 : OUT STD_LOGIC;
        matrix_we0 : OUT STD_LOGIC;
        matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gemm_mmult IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        c_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        c_ce0 : OUT STD_LOGIC;
        c_we0 : OUT STD_LOGIC;
        c_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_ROWS : IN STD_LOGIC_VECTOR (31 downto 0);
        A_COLS : IN STD_LOGIC_VECTOR (31 downto 0);
        B_COLS : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gemm_gemm_Pipeline_VITIS_LOOP_41_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_TREADY : IN STD_LOGIC;
        tmp_num0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_num1 : IN STD_LOGIC_VECTOR (31 downto 0);
        mul_i : IN STD_LOGIC_VECTOR (31 downto 0);
        out_r_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        out_r_TVALID : OUT STD_LOGIC;
        c_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        c_ce0 : OUT STD_LOGIC;
        c_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_num0_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_num0_2_out_ap_vld : OUT STD_LOGIC;
        tmp_num1_4_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_num1_4_out_ap_vld : OUT STD_LOGIC;
        p_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_out_ap_vld : OUT STD_LOGIC;
        p_out1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_out1_ap_vld : OUT STD_LOGIC );
    end component;


    component gemm_sitofp_32s_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gemm_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gemm_a_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gemm_c_RAM_1WNR_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gemm_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    a_U : component gemm_a_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => a_address0,
        ce0 => a_ce0,
        we0 => a_we0,
        d0 => grp_inputMatrix_fu_73_matrix_d0,
        q0 => a_q0);

    b_U : component gemm_a_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => b_address0,
        ce0 => b_ce0,
        we0 => b_we0,
        d0 => grp_inputMatrix_fu_73_matrix_d0,
        q0 => b_q0);

    c_U : component gemm_c_RAM_1WNR_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c_address0,
        ce0 => c_ce0,
        we0 => c_we0,
        d0 => grp_mmult_fu_80_c_d0,
        q0 => c_q0);

    grp_inputMatrix_fu_73 : component gemm_inputMatrix
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_inputMatrix_fu_73_ap_start,
        ap_done => grp_inputMatrix_fu_73_ap_done,
        ap_idle => grp_inputMatrix_fu_73_ap_idle,
        ap_ready => grp_inputMatrix_fu_73_ap_ready,
        in_r_TDATA => in_r_TDATA_int_regslice,
        in_r_TVALID => in_r_TVALID_int_regslice,
        in_r_TREADY => grp_inputMatrix_fu_73_in_r_TREADY,
        matrix_address0 => grp_inputMatrix_fu_73_matrix_address0,
        matrix_ce0 => grp_inputMatrix_fu_73_matrix_ce0,
        matrix_we0 => grp_inputMatrix_fu_73_matrix_we0,
        matrix_d0 => grp_inputMatrix_fu_73_matrix_d0,
        ap_return_0 => grp_inputMatrix_fu_73_ap_return_0,
        ap_return_1 => grp_inputMatrix_fu_73_ap_return_1);

    grp_mmult_fu_80 : component gemm_mmult
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mmult_fu_80_ap_start,
        ap_done => grp_mmult_fu_80_ap_done,
        ap_idle => grp_mmult_fu_80_ap_idle,
        ap_ready => grp_mmult_fu_80_ap_ready,
        a_address0 => grp_mmult_fu_80_a_address0,
        a_ce0 => grp_mmult_fu_80_a_ce0,
        a_q0 => a_q0,
        b_address0 => grp_mmult_fu_80_b_address0,
        b_ce0 => grp_mmult_fu_80_b_ce0,
        b_q0 => b_q0,
        c_address0 => grp_mmult_fu_80_c_address0,
        c_ce0 => grp_mmult_fu_80_c_ce0,
        c_we0 => grp_mmult_fu_80_c_we0,
        c_d0 => grp_mmult_fu_80_c_d0,
        A_ROWS => N_reg_182,
        A_COLS => K_reg_189,
        B_COLS => M_reg_194);

    grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90 : component gemm_gemm_Pipeline_VITIS_LOOP_41_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_ap_start,
        ap_done => grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_ap_done,
        ap_idle => grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_ap_idle,
        ap_ready => grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_ap_ready,
        out_r_TREADY => grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_out_r_TREADY,
        tmp_num0 => tmp_num0_reg_206,
        tmp_num1 => tmp_num1_reg_211,
        mul_i => mul_i_reg_201,
        out_r_TDATA => grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_out_r_TDATA,
        out_r_TVALID => grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_out_r_TVALID,
        c_address0 => grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_c_address0,
        c_ce0 => grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_c_ce0,
        c_q0 => c_q0,
        tmp_num0_2_out => grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_tmp_num0_2_out,
        tmp_num0_2_out_ap_vld => grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_tmp_num0_2_out_ap_vld,
        tmp_num1_4_out => grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_tmp_num1_4_out,
        tmp_num1_4_out_ap_vld => grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_tmp_num1_4_out_ap_vld,
        p_out => grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_p_out,
        p_out_ap_vld => grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_p_out_ap_vld,
        p_out1 => grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_p_out1,
        p_out1_ap_vld => grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_p_out1_ap_vld);

    sitofp_32s_32_4_no_dsp_1_U510 : component gemm_sitofp_32s_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => N_reg_182,
        ce => grp_fu_104_ce,
        dout => grp_fu_104_p1);

    sitofp_32s_32_4_no_dsp_1_U511 : component gemm_sitofp_32s_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_inputMatrix_fu_73_ap_return_1,
        ce => grp_fu_108_ce,
        dout => grp_fu_108_p1);

    mul_32s_32s_32_1_1_U512 : component gemm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => M_reg_194,
        din1 => N_reg_182,
        dout => mul_i_fu_121_p2);

    regslice_both_in_r_U : component gemm_regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TDATA,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_r_U_ack_in,
        data_out => in_r_TDATA_int_regslice,
        vld_out => in_r_TVALID_int_regslice,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_r_U_apdone_blk);

    regslice_both_out_r_U : component gemm_regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_r_TDATA_int_regslice,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => out_r_TREADY_int_regslice,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_r_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_ap_ready = ap_const_logic_1)) then 
                    grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_inputMatrix_fu_73_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_inputMatrix_fu_73_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_inputMatrix_fu_73_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_inputMatrix_fu_73_ap_ready = ap_const_logic_1)) then 
                    grp_inputMatrix_fu_73_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mmult_fu_80_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mmult_fu_80_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_mmult_fu_80_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mmult_fu_80_ap_ready = ap_const_logic_1)) then 
                    grp_mmult_fu_80_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                K_reg_189 <= grp_inputMatrix_fu_73_ap_return_1;
                N_reg_182 <= grp_inputMatrix_fu_73_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                M_reg_194 <= grp_inputMatrix_fu_73_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mul_i_reg_201 <= mul_i_fu_121_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_num0_reg_206 <= grp_fu_104_p1;
                tmp_num1_reg_211 <= grp_fu_108_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state3, ap_CS_fsm_state5, grp_inputMatrix_fu_73_ap_done, grp_mmult_fu_80_ap_done, grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state9, regslice_both_out_r_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_inputMatrix_fu_73_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_inputMatrix_fu_73_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_mmult_fu_80_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((out_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((out_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_r_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_state3, grp_inputMatrix_fu_73_matrix_address0, grp_mmult_fu_80_a_address0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_address0 <= grp_mmult_fu_80_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_address0 <= grp_inputMatrix_fu_73_matrix_address0;
        else 
            a_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_state3, grp_inputMatrix_fu_73_matrix_ce0, grp_mmult_fu_80_a_ce0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_ce0 <= grp_mmult_fu_80_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_ce0 <= grp_inputMatrix_fu_73_matrix_ce0;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_we0_assign_proc : process(ap_CS_fsm_state3, grp_inputMatrix_fu_73_matrix_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_we0 <= grp_inputMatrix_fu_73_matrix_we0;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(out_r_TREADY_int_regslice)
    begin
        if ((out_r_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(regslice_both_out_r_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
        if (((out_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_r_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_inputMatrix_fu_73_ap_done)
    begin
        if ((grp_inputMatrix_fu_73_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_inputMatrix_fu_73_ap_done)
    begin
        if ((grp_inputMatrix_fu_73_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(grp_mmult_fu_80_ap_done)
    begin
        if ((grp_mmult_fu_80_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_ap_done)
    begin
        if ((grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state11_assign_proc : process(regslice_both_out_r_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
                ap_block_state11 <= ((out_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_r_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state11, regslice_both_out_r_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
        if ((not(((out_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_r_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, regslice_both_out_r_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
        if ((not(((out_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_r_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    b_address0_assign_proc : process(ap_CS_fsm_state5, grp_inputMatrix_fu_73_matrix_address0, grp_mmult_fu_80_b_address0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            b_address0 <= grp_mmult_fu_80_b_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_address0 <= grp_inputMatrix_fu_73_matrix_address0;
        else 
            b_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    b_ce0_assign_proc : process(ap_CS_fsm_state5, grp_inputMatrix_fu_73_matrix_ce0, grp_mmult_fu_80_b_ce0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            b_ce0 <= grp_mmult_fu_80_b_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_ce0 <= grp_inputMatrix_fu_73_matrix_ce0;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_we0_assign_proc : process(ap_CS_fsm_state5, grp_inputMatrix_fu_73_matrix_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_we0 <= grp_inputMatrix_fu_73_matrix_we0;
        else 
            b_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln174_1_fu_141_p1 <= grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_tmp_num1_4_out;
    bitcast_ln174_fu_137_p1 <= grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_tmp_num0_2_out;

    c_address0_assign_proc : process(grp_mmult_fu_80_c_address0, grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_c_address0, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            c_address0 <= grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_c_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c_address0 <= grp_mmult_fu_80_c_address0;
        else 
            c_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    c_ce0_assign_proc : process(grp_mmult_fu_80_c_ce0, grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_c_ce0, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            c_ce0 <= grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_c_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c_ce0 <= grp_mmult_fu_80_c_ce0;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_we0_assign_proc : process(grp_mmult_fu_80_c_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c_we0 <= grp_mmult_fu_80_c_we0;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_104_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, grp_inputMatrix_fu_73_ap_done, grp_mmult_fu_80_ap_done, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_inputMatrix_fu_73_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_mmult_fu_80_ap_done = ap_const_logic_1)))) then 
            grp_fu_104_ce <= ap_const_logic_1;
        else 
            grp_fu_104_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_108_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, grp_inputMatrix_fu_73_ap_done, grp_mmult_fu_80_ap_done, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_inputMatrix_fu_73_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_mmult_fu_80_ap_done = ap_const_logic_1)))) then 
            grp_fu_108_ce <= ap_const_logic_1;
        else 
            grp_fu_108_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_ap_start <= grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_ap_start_reg;
    grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_out_r_TREADY <= (out_r_TREADY_int_regslice and ap_CS_fsm_state9);
    grp_inputMatrix_fu_73_ap_start <= grp_inputMatrix_fu_73_ap_start_reg;
    grp_mmult_fu_80_ap_start <= grp_mmult_fu_80_ap_start_reg;
    in_r_TREADY <= regslice_both_in_r_U_ack_in;

    in_r_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, grp_inputMatrix_fu_73_in_r_TREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_r_TREADY_int_regslice <= grp_inputMatrix_fu_73_in_r_TREADY;
        else 
            in_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    out_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, out_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            out_r_TDATA_blk_n <= out_r_TREADY_int_regslice;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_r_TDATA_int_regslice_assign_proc : process(ap_CS_fsm_state10, p_0_fu_145_p5, grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_out_r_TDATA, grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_out_r_TVALID, ap_CS_fsm_state9, out_r_TREADY_int_regslice)
    begin
        if (((out_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            out_r_TDATA_int_regslice <= p_0_fu_145_p5;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_out_r_TVALID = ap_const_logic_1))) then 
            out_r_TDATA_int_regslice <= grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_out_r_TDATA;
        else 
            out_r_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    out_r_TVALID <= regslice_both_out_r_U_vld_out;

    out_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state10, grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_out_r_TVALID, ap_CS_fsm_state9, out_r_TREADY_int_regslice)
    begin
        if (((out_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            out_r_TVALID_int_regslice <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_r_TVALID_int_regslice <= grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_out_r_TVALID;
        else 
            out_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    p_0_fu_145_p5 <= (((grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_p_out1 & grp_gemm_Pipeline_VITIS_LOOP_41_1_fu_90_p_out) & bitcast_ln174_1_fu_141_p1) & bitcast_ln174_fu_137_p1);
end behav;
