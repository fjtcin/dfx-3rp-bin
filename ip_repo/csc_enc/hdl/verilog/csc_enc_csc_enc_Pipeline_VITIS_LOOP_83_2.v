// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module csc_enc_csc_enc_Pipeline_VITIS_LOOP_83_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        N,
        trunc_ln2,
        trunc_ln81_2,
        a_address0,
        a_ce0,
        a_q0,
        data_address0,
        data_ce0,
        data_we0,
        data_d0,
        trunc_ln,
        nnz_1_out_i,
        nnz_1_out_o,
        nnz_1_out_o_ap_vld,
        grp_fu_139_p_din0,
        grp_fu_139_p_dout0,
        grp_fu_139_p_ce,
        grp_fu_423_p_din0,
        grp_fu_423_p_dout0,
        grp_fu_423_p_ce,
        grp_fu_426_p_din0,
        grp_fu_426_p_din1,
        grp_fu_426_p_opcode,
        grp_fu_426_p_dout0,
        grp_fu_426_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] N;
input  [13:0] trunc_ln2;
input  [13:0] trunc_ln81_2;
output  [13:0] a_address0;
output   a_ce0;
input  [31:0] a_q0;
output  [11:0] data_address0;
output   data_ce0;
output   data_we0;
output  [31:0] data_d0;
input  [11:0] trunc_ln;
input  [31:0] nnz_1_out_i;
output  [31:0] nnz_1_out_o;
output   nnz_1_out_o_ap_vld;
output  [31:0] grp_fu_139_p_din0;
input  [31:0] grp_fu_139_p_dout0;
output   grp_fu_139_p_ce;
output  [31:0] grp_fu_423_p_din0;
input  [63:0] grp_fu_423_p_dout0;
output   grp_fu_423_p_ce;
output  [63:0] grp_fu_426_p_din0;
output  [63:0] grp_fu_426_p_din1;
output  [4:0] grp_fu_426_p_opcode;
input  [0:0] grp_fu_426_p_dout0;
output   grp_fu_426_p_ce;

reg ap_idle;
reg a_ce0;
reg[11:0] data_address0;
reg data_ce0;
reg data_we0;
reg[31:0] data_d0;
reg[31:0] nnz_1_out_o;
reg nnz_1_out_o_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln83_fu_146_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] j_1_reg_314;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] j_1_reg_314_pp0_iter1_reg;
reg   [0:0] icmp_ln83_reg_319;
reg   [31:0] num_reg_328;
reg   [31:0] num_reg_328_pp0_iter2_reg;
wire   [31:0] bitcast_ln356_fu_201_p1;
wire   [0:0] icmp_ln85_fu_224_p2;
reg   [0:0] icmp_ln85_reg_343;
wire   [0:0] icmp_ln85_1_fu_230_p2;
reg   [0:0] icmp_ln85_1_reg_348;
wire   [0:0] and_ln85_fu_240_p2;
reg   [0:0] and_ln85_reg_353;
reg   [0:0] and_ln85_reg_353_pp0_iter3_reg;
wire   [11:0] add_ln87_fu_259_p2;
reg   [11:0] add_ln87_reg_357;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln84_fu_170_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln86_fu_250_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln87_fu_276_p1;
wire   [31:0] nnz_fu_264_p2;
reg   [13:0] phi_mul_fu_54;
wire   [13:0] add_ln84_1_fu_160_p2;
wire    ap_loop_init;
reg   [31:0] j_fu_58;
wire   [31:0] add_ln83_fu_151_p2;
wire   [13:0] add_ln84_fu_165_p2;
wire   [31:0] data_V_fu_185_p1;
wire   [30:0] trunc_ln368_fu_189_p1;
wire   [31:0] p_Result_s_fu_193_p3;
wire   [63:0] bitcast_ln85_fu_206_p1;
wire   [10:0] tmp_s_fu_210_p4;
wire   [51:0] trunc_ln85_fu_220_p1;
wire   [0:0] or_ln85_fu_236_p2;
wire   [11:0] trunc_ln86_fu_255_p1;
wire    ap_block_pp0_stage1_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to3;
reg    ap_done_pending_pp0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

csc_enc_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        j_fu_58 <= 32'd0;
    end else if (((icmp_ln83_fu_146_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        j_fu_58 <= add_ln83_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        phi_mul_fu_54 <= 14'd0;
    end else if (((icmp_ln83_fu_146_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        phi_mul_fu_54 <= add_ln84_1_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln85_reg_353) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln87_reg_357 <= add_ln87_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln85_reg_353 <= and_ln85_fu_240_p2;
        and_ln85_reg_353_pp0_iter3_reg <= and_ln85_reg_353;
        num_reg_328_pp0_iter2_reg <= num_reg_328;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln83_reg_319 <= icmp_ln83_fu_146_p2;
        icmp_ln85_1_reg_348 <= icmp_ln85_1_fu_230_p2;
        icmp_ln85_reg_343 <= icmp_ln85_fu_224_p2;
        j_1_reg_314 <= j_fu_58;
        j_1_reg_314_pp0_iter1_reg <= j_1_reg_314;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_319 == 1'd0))) begin
        num_reg_328 <= a_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln83_fu_146_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready == 1'b0) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            data_address0 = zext_ln87_fu_276_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            data_address0 = zext_ln86_fu_250_p1;
        end else begin
            data_address0 = 'bx;
        end
    end else begin
        data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            data_d0 = grp_fu_139_p_dout0;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            data_d0 = num_reg_328_pp0_iter2_reg;
        end else begin
            data_d0 = 'bx;
        end
    end else begin
        data_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln85_reg_353_pp0_iter3_reg) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'd1 == and_ln85_reg_353) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        data_we0 = 1'b1;
    end else begin
        data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln85_reg_353) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        nnz_1_out_o = nnz_fu_264_p2;
    end else begin
        nnz_1_out_o = nnz_1_out_i;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln85_reg_353) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        nnz_1_out_o_ap_vld = 1'b1;
    end else begin
        nnz_1_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln84_fu_170_p1;

assign add_ln83_fu_151_p2 = (j_fu_58 + 32'd1);

assign add_ln84_1_fu_160_p2 = (phi_mul_fu_54 + trunc_ln2);

assign add_ln84_fu_165_p2 = (phi_mul_fu_54 + trunc_ln81_2);

assign add_ln87_fu_259_p2 = (trunc_ln86_fu_255_p1 + trunc_ln);

assign and_ln85_fu_240_p2 = (or_ln85_fu_236_p2 & grp_fu_426_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign bitcast_ln356_fu_201_p1 = p_Result_s_fu_193_p3;

assign bitcast_ln85_fu_206_p1 = grp_fu_423_p_dout0;

assign data_V_fu_185_p1 = a_q0;

assign grp_fu_139_p_ce = 1'b1;

assign grp_fu_139_p_din0 = j_1_reg_314_pp0_iter1_reg;

assign grp_fu_423_p_ce = 1'b1;

assign grp_fu_423_p_din0 = bitcast_ln356_fu_201_p1;

assign grp_fu_426_p_ce = 1'b1;

assign grp_fu_426_p_din0 = grp_fu_423_p_dout0;

assign grp_fu_426_p_din1 = 64'd4517329193108106637;

assign grp_fu_426_p_opcode = 5'd2;

assign icmp_ln83_fu_146_p2 = ((j_fu_58 == N) ? 1'b1 : 1'b0);

assign icmp_ln85_1_fu_230_p2 = ((trunc_ln85_fu_220_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_224_p2 = ((tmp_s_fu_210_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign nnz_fu_264_p2 = (nnz_1_out_i + 32'd1);

assign or_ln85_fu_236_p2 = (icmp_ln85_reg_343 | icmp_ln85_1_reg_348);

assign p_Result_s_fu_193_p3 = {{1'd0}, {trunc_ln368_fu_189_p1}};

assign tmp_s_fu_210_p4 = {{bitcast_ln85_fu_206_p1[62:52]}};

assign trunc_ln368_fu_189_p1 = data_V_fu_185_p1[30:0];

assign trunc_ln85_fu_220_p1 = bitcast_ln85_fu_206_p1[51:0];

assign trunc_ln86_fu_255_p1 = nnz_1_out_i[11:0];

assign zext_ln84_fu_170_p1 = add_ln84_fu_165_p2;

assign zext_ln86_fu_250_p1 = nnz_1_out_i;

assign zext_ln87_fu_276_p1 = add_ln87_reg_357;

endmodule //csc_enc_csc_enc_Pipeline_VITIS_LOOP_83_2
