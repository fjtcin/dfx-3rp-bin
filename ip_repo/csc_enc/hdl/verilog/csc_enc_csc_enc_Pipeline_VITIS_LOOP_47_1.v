// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module csc_enc_csc_enc_Pipeline_VITIS_LOOP_47_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_r_TREADY,
        tmp_num0,
        tmp_num1,
        tmp_num2,
        add_ln47,
        out_r_TDATA,
        out_r_TVALID,
        data_address0,
        data_ce0,
        data_q0,
        tmp_num0_2_out,
        tmp_num0_2_out_ap_vld,
        tmp_num1_1_out,
        tmp_num1_1_out_ap_vld,
        tmp_num2_1_out,
        tmp_num2_1_out_ap_vld,
        p_out,
        p_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   out_r_TREADY;
input  [31:0] tmp_num0;
input  [31:0] tmp_num1;
input  [31:0] tmp_num2;
input  [31:0] add_ln47;
output  [127:0] out_r_TDATA;
output   out_r_TVALID;
output  [11:0] data_address0;
output   data_ce0;
input  [31:0] data_q0;
output  [31:0] tmp_num0_2_out;
output   tmp_num0_2_out_ap_vld;
output  [31:0] tmp_num1_1_out;
output   tmp_num1_1_out_ap_vld;
output  [31:0] tmp_num2_1_out;
output   tmp_num2_1_out_ap_vld;
output  [31:0] p_out;
output   p_out_ap_vld;

reg ap_idle;
reg out_r_TVALID;
reg[11:0] data_address0;
reg data_ce0;
reg tmp_num0_2_out_ap_vld;
reg tmp_num1_1_out_ap_vld;
reg tmp_num2_1_out_ap_vld;
reg p_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [1:0] p_V_load_2_reg_402;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln47_fu_216_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    out_r_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [1:0] p_V_load_2_load_fu_227_p1;
wire   [11:0] data_addr_3_gep_fu_164_p3;
wire   [11:0] data_addr_2_gep_fu_172_p3;
wire   [11:0] data_addr_gep_fu_180_p3;
wire   [63:0] i_1_cast_fu_230_p1;
reg   [1:0] p_V_fu_64;
wire   [1:0] p_V_2_fu_241_p2;
wire    ap_loop_init;
reg   [31:0] i_1_fu_68;
wire   [31:0] add_ln47_1_fu_221_p2;
reg   [31:0] tmp_num3_fu_72;
reg   [31:0] empty_fu_76;
wire   [31:0] bitcast_ln41_fu_313_p1;
reg   [31:0] tmp_num2_1_fu_80;
reg   [31:0] tmp_num1_1_fu_84;
reg   [31:0] tmp_num0_1_fu_88;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bitcast_ln174_3_fu_291_p1;
wire   [31:0] bitcast_ln174_2_fu_287_p1;
wire   [31:0] bitcast_ln174_1_fu_283_p1;
wire   [31:0] bitcast_ln174_fu_279_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_153;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

csc_enc_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_1_fu_68 <= 32'd0;
        end else if (((icmp_ln47_fu_216_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_1_fu_68 <= add_ln47_1_fu_221_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            p_V_fu_64 <= 2'd3;
        end else if (((icmp_ln47_fu_216_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            p_V_fu_64 <= p_V_2_fu_241_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            tmp_num0_1_fu_88 <= tmp_num0;
        end else if (((p_V_load_2_reg_402 == 2'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            tmp_num0_1_fu_88 <= data_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            tmp_num1_1_fu_84 <= tmp_num1;
        end else if (((p_V_load_2_reg_402 == 2'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            tmp_num1_1_fu_84 <= data_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            tmp_num2_1_fu_80 <= tmp_num2;
        end else if (((p_V_load_2_reg_402 == 2'd2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            tmp_num2_1_fu_80 <= data_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (p_V_load_2_reg_402 == 2'd3) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        empty_fu_76 <= bitcast_ln41_fu_313_p1;
        tmp_num3_fu_72 <= data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_V_load_2_reg_402 <= p_V_fu_64;
    end
end

always @ (*) begin
    if (((icmp_ln47_fu_216_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_153)) begin
        if ((p_V_load_2_load_fu_227_p1 == 2'd3)) begin
            data_address0 = data_addr_gep_fu_180_p3;
        end else if ((p_V_load_2_load_fu_227_p1 == 2'd0)) begin
            data_address0 = data_addr_2_gep_fu_172_p3;
        end else if ((p_V_load_2_load_fu_227_p1 == 2'd1)) begin
            data_address0 = data_addr_3_gep_fu_164_p3;
        end else if ((p_V_load_2_load_fu_227_p1 == 2'd2)) begin
            data_address0 = i_1_cast_fu_230_p1;
        end else begin
            data_address0 = 'bx;
        end
    end else begin
        data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln47_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (p_V_load_2_load_fu_227_p1 == 2'd3)) | ((icmp_ln47_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (p_V_load_2_load_fu_227_p1 == 2'd0)) | ((icmp_ln47_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (p_V_load_2_load_fu_227_p1 == 2'd1)) | ((icmp_ln47_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (p_V_load_2_load_fu_227_p1 == 2'd2)))) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (p_V_load_2_reg_402 == 2'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_r_TDATA_blk_n = out_r_TREADY;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (p_V_load_2_reg_402 == 2'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_r_TVALID = 1'b1;
    end else begin
        out_r_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln47_fu_216_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln47_fu_216_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_num0_2_out_ap_vld = 1'b1;
    end else begin
        tmp_num0_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln47_fu_216_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_num1_1_out_ap_vld = 1'b1;
    end else begin
        tmp_num1_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln47_fu_216_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_num2_1_out_ap_vld = 1'b1;
    end else begin
        tmp_num2_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln47_1_fu_221_p2 = (i_1_fu_68 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((p_V_load_2_reg_402 == 2'd0) & (out_r_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((p_V_load_2_reg_402 == 2'd0) & (out_r_TREADY == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((p_V_load_2_reg_402 == 2'd0) & (out_r_TREADY == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((p_V_load_2_reg_402 == 2'd0) & (out_r_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((p_V_load_2_reg_402 == 2'd0) & (out_r_TREADY == 1'b0));
end

always @ (*) begin
    ap_condition_153 = ((icmp_ln47_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign bitcast_ln174_1_fu_283_p1 = tmp_num1_1_fu_84;

assign bitcast_ln174_2_fu_287_p1 = tmp_num2_1_fu_80;

assign bitcast_ln174_3_fu_291_p1 = tmp_num3_fu_72;

assign bitcast_ln174_fu_279_p1 = tmp_num0_1_fu_88;

assign bitcast_ln41_fu_313_p1 = data_q0;

assign data_addr_2_gep_fu_172_p3 = i_1_cast_fu_230_p1;

assign data_addr_3_gep_fu_164_p3 = i_1_cast_fu_230_p1;

assign data_addr_gep_fu_180_p3 = i_1_cast_fu_230_p1;

assign i_1_cast_fu_230_p1 = i_1_fu_68;

assign icmp_ln47_fu_216_p2 = ((i_1_fu_68 == add_ln47) ? 1'b1 : 1'b0);

assign out_r_TDATA = {{{{bitcast_ln174_3_fu_291_p1}, {bitcast_ln174_2_fu_287_p1}}, {bitcast_ln174_1_fu_283_p1}}, {bitcast_ln174_fu_279_p1}};

assign p_V_2_fu_241_p2 = (p_V_fu_64 + 2'd1);

assign p_V_load_2_load_fu_227_p1 = p_V_fu_64;

assign p_out = empty_fu_76;

assign tmp_num0_2_out = tmp_num0_1_fu_88;

assign tmp_num1_1_out = tmp_num1_1_fu_84;

assign tmp_num2_1_out = tmp_num2_1_fu_80;

endmodule //csc_enc_csc_enc_Pipeline_VITIS_LOOP_47_1
