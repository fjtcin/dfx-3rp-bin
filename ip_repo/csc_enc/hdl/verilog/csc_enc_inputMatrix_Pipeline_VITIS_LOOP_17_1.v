// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module csc_enc_inputMatrix_Pipeline_VITIS_LOOP_17_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_TVALID,
        data_V,
        tmp_1,
        tmp_2,
        mul,
        matrix_address0,
        matrix_ce0,
        matrix_we0,
        matrix_d0,
        in_r_TDATA,
        in_r_TREADY,
        L_0_out,
        L_0_out_ap_vld,
        grp_fu_471_p_din0,
        grp_fu_471_p_dout0,
        grp_fu_471_p_ce,
        grp_fu_474_p_din0,
        grp_fu_474_p_din1,
        grp_fu_474_p_opcode,
        grp_fu_474_p_dout0,
        grp_fu_474_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   in_r_TVALID;
input  [31:0] data_V;
input  [31:0] tmp_1;
input  [31:0] tmp_2;
input  [31:0] mul;
output  [13:0] matrix_address0;
output   matrix_ce0;
output   matrix_we0;
output  [31:0] matrix_d0;
input  [127:0] in_r_TDATA;
output   in_r_TREADY;
output  [31:0] L_0_out;
output   L_0_out_ap_vld;
output  [31:0] grp_fu_471_p_din0;
input  [63:0] grp_fu_471_p_dout0;
output   grp_fu_471_p_ce;
output  [63:0] grp_fu_474_p_din0;
output  [63:0] grp_fu_474_p_din1;
output  [4:0] grp_fu_474_p_opcode;
input  [0:0] grp_fu_474_p_dout0;
output   grp_fu_474_p_ce;

reg ap_idle;
reg matrix_ce0;
reg matrix_we0;
reg in_r_TREADY;
reg L_0_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln17_fu_238_p2;
wire   [1:0] p_V_load_1_load_fu_249_p1;
reg    ap_predicate_op40_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in_r_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln17_reg_486;
wire   [31:0] bitcast_ln356_fu_333_p1;
wire   [0:0] icmp_ln36_fu_366_p2;
reg   [0:0] icmp_ln36_reg_504;
wire   [0:0] icmp_ln36_1_fu_372_p2;
reg   [0:0] icmp_ln36_1_reg_509;
reg   [31:0] ap_phi_mux_data_V_2_phi_fu_165_p8;
wire   [31:0] ap_phi_reg_pp0_iter1_data_V_2_reg_162;
wire   [31:0] tmp_num0_fu_257_p1;
wire   [63:0] i_cast1_fu_252_p1;
reg   [1:0] p_V_fu_84;
wire   [1:0] p_V_1_fu_310_p2;
wire    ap_loop_init;
reg   [31:0] empty_fu_88;
wire   [31:0] select_ln36_1_fu_408_p3;
reg   [14:0] i_fu_92;
wire   [14:0] add_ln17_fu_243_p2;
reg   [31:0] L_0_fu_96;
wire   [31:0] select_ln36_fu_400_p3;
reg   [31:0] empty_16_fu_100;
reg   [31:0] empty_17_fu_104;
reg   [31:0] empty_18_fu_108;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] i_cast_fu_234_p1;
wire   [30:0] trunc_ln368_fu_321_p1;
wire   [31:0] p_Result_s_fu_325_p3;
wire   [63:0] bitcast_ln36_fu_348_p1;
wire   [10:0] tmp_7_fu_352_p4;
wire   [51:0] trunc_ln36_fu_362_p1;
wire   [0:0] or_ln36_fu_384_p2;
wire   [0:0] and_ln36_fu_388_p2;
wire   [31:0] add_ln36_fu_394_p2;
reg    grp_fu_175_ce;
reg    grp_fu_178_ce;
reg    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_355;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

csc_enc_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            L_0_fu_96 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            L_0_fu_96 <= select_ln36_fu_400_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_16_fu_100 <= tmp_2;
        end else if ((1'b1 == ap_condition_355)) begin
            empty_16_fu_100 <= {{in_r_TDATA[127:96]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_17_fu_104 <= tmp_1;
        end else if ((1'b1 == ap_condition_355)) begin
            empty_17_fu_104 <= {{in_r_TDATA[95:64]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_18_fu_108 <= data_V;
        end else if ((1'b1 == ap_condition_355)) begin
            empty_18_fu_108 <= {{in_r_TDATA[63:32]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            empty_fu_88 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            empty_fu_88 <= select_ln36_1_fu_408_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_92 <= 15'd0;
        end else if (((icmp_ln17_fu_238_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_92 <= add_ln17_fu_243_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            p_V_fu_84 <= 2'd2;
        end else if (((icmp_ln17_fu_238_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            p_V_fu_84 <= p_V_1_fu_310_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln17_reg_486 <= icmp_ln17_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln36_1_reg_509 <= icmp_ln36_1_fu_372_p2;
        icmp_ln36_reg_504 <= icmp_ln36_fu_366_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln17_reg_486 == 1'd1))) begin
        L_0_out_ap_vld = 1'b1;
    end else begin
        L_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln17_fu_238_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln17_fu_238_p2 == 1'd0)) begin
        if ((p_V_load_1_load_fu_249_p1 == 2'd2)) begin
            ap_phi_mux_data_V_2_phi_fu_165_p8 = empty_17_fu_104;
        end else if ((p_V_load_1_load_fu_249_p1 == 2'd1)) begin
            ap_phi_mux_data_V_2_phi_fu_165_p8 = empty_18_fu_108;
        end else if ((p_V_fu_84 == 2'd0)) begin
            ap_phi_mux_data_V_2_phi_fu_165_p8 = tmp_num0_fu_257_p1;
        end else if ((p_V_load_1_load_fu_249_p1 == 2'd3)) begin
            ap_phi_mux_data_V_2_phi_fu_165_p8 = empty_16_fu_100;
        end else begin
            ap_phi_mux_data_V_2_phi_fu_165_p8 = ap_phi_reg_pp0_iter1_data_V_2_reg_162;
        end
    end else begin
        ap_phi_mux_data_V_2_phi_fu_165_p8 = ap_phi_reg_pp0_iter1_data_V_2_reg_162;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_175_ce = 1'b1;
    end else begin
        grp_fu_175_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_178_ce = 1'b1;
    end else begin
        grp_fu_178_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op40_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_r_TDATA_blk_n = in_r_TVALID;
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op40_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_r_TREADY = 1'b1;
    end else begin
        in_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        matrix_ce0 = 1'b1;
    end else begin
        matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln17_fu_238_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        matrix_we0 = 1'b1;
    end else begin
        matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign L_0_out = L_0_fu_96;

assign add_ln17_fu_243_p2 = (i_fu_92 + 15'd1);

assign add_ln36_fu_394_p2 = (empty_fu_88 + 32'd1);

assign and_ln36_fu_388_p2 = (or_ln36_fu_384_p2 & grp_fu_474_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = ((ap_predicate_op40_read_state2 == 1'b1) & (in_r_TVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_predicate_op40_read_state2 == 1'b1) & (in_r_TVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_predicate_op40_read_state2 == 1'b1) & (in_r_TVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_predicate_op40_read_state2 == 1'b1) & (in_r_TVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((ap_predicate_op40_read_state2 == 1'b1) & (in_r_TVALID == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_355 = ((p_V_fu_84 == 2'd0) & (icmp_ln17_fu_238_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_phi_reg_pp0_iter1_data_V_2_reg_162 = 'bx;

always @ (*) begin
    ap_predicate_op40_read_state2 = ((p_V_fu_84 == 2'd0) & (icmp_ln17_fu_238_p2 == 1'd0));
end

assign bitcast_ln356_fu_333_p1 = p_Result_s_fu_325_p3;

assign bitcast_ln36_fu_348_p1 = grp_fu_471_p_dout0;

assign grp_fu_471_p_ce = grp_fu_175_ce;

assign grp_fu_471_p_din0 = bitcast_ln356_fu_333_p1;

assign grp_fu_474_p_ce = grp_fu_178_ce;

assign grp_fu_474_p_din0 = grp_fu_471_p_dout0;

assign grp_fu_474_p_din1 = 64'd4517329193108106637;

assign grp_fu_474_p_opcode = 5'd2;

assign i_cast1_fu_252_p1 = i_fu_92;

assign i_cast_fu_234_p1 = i_fu_92;

assign icmp_ln17_fu_238_p2 = ((i_cast_fu_234_p1 == mul) ? 1'b1 : 1'b0);

assign icmp_ln36_1_fu_372_p2 = ((trunc_ln36_fu_362_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_366_p2 = ((tmp_7_fu_352_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign matrix_address0 = i_cast1_fu_252_p1;

assign matrix_d0 = ap_phi_mux_data_V_2_phi_fu_165_p8;

assign or_ln36_fu_384_p2 = (icmp_ln36_reg_504 | icmp_ln36_1_reg_509);

assign p_Result_s_fu_325_p3 = {{1'd0}, {trunc_ln368_fu_321_p1}};

assign p_V_1_fu_310_p2 = (p_V_fu_84 + 2'd1);

assign p_V_load_1_load_fu_249_p1 = p_V_fu_84;

assign select_ln36_1_fu_408_p3 = ((and_ln36_fu_388_p2[0:0] == 1'b1) ? add_ln36_fu_394_p2 : empty_fu_88);

assign select_ln36_fu_400_p3 = ((and_ln36_fu_388_p2[0:0] == 1'b1) ? add_ln36_fu_394_p2 : L_0_fu_96);

assign tmp_7_fu_352_p4 = {{bitcast_ln36_fu_348_p1[62:52]}};

assign tmp_num0_fu_257_p1 = in_r_TDATA[31:0];

assign trunc_ln368_fu_321_p1 = ap_phi_mux_data_V_2_phi_fu_165_p8[30:0];

assign trunc_ln36_fu_362_p1 = bitcast_ln36_fu_348_p1[51:0];

endmodule //csc_enc_inputMatrix_Pipeline_VITIS_LOOP_17_1
