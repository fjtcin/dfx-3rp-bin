-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity csr_enc_csr_enc_Pipeline_VITIS_LOOP_47_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    tmp_num0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_num1 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_num2 : IN STD_LOGIC_VECTOR (31 downto 0);
    add_ln47 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    data_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_num0_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_num0_2_out_ap_vld : OUT STD_LOGIC;
    tmp_num1_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_num1_1_out_ap_vld : OUT STD_LOGIC;
    tmp_num2_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_num2_1_out_ap_vld : OUT STD_LOGIC;
    p_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of csr_enc_csr_enc_Pipeline_VITIS_LOOP_47_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal p_V_load_2_reg_402 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln47_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_V_load_2_load_fu_227_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal data_addr_3_gep_fu_164_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_addr_2_gep_fu_172_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_addr_gep_fu_180_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_cast_fu_230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_V_fu_64 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_V_2_fu_241_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_1_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln47_1_fu_221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num3_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln41_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num2_1_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num1_1_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num0_1_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bitcast_ln174_3_fu_291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_2_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_1_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_153 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component csr_enc_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component csr_enc_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_68 <= ap_const_lv32_0;
                elsif (((icmp_ln47_fu_216_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_1_fu_68 <= add_ln47_1_fu_221_p2;
                end if;
            end if; 
        end if;
    end process;

    p_V_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_V_fu_64 <= ap_const_lv2_3;
                elsif (((icmp_ln47_fu_216_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    p_V_fu_64 <= p_V_2_fu_241_p2;
                end if;
            end if; 
        end if;
    end process;

    tmp_num0_1_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    tmp_num0_1_fu_88 <= tmp_num0;
                elsif (((p_V_load_2_reg_402 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    tmp_num0_1_fu_88 <= data_q0;
                end if;
            end if; 
        end if;
    end process;

    tmp_num1_1_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    tmp_num1_1_fu_84 <= tmp_num1;
                elsif (((p_V_load_2_reg_402 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    tmp_num1_1_fu_84 <= data_q0;
                end if;
            end if; 
        end if;
    end process;

    tmp_num2_1_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    tmp_num2_1_fu_80 <= tmp_num2;
                elsif (((p_V_load_2_reg_402 = ap_const_lv2_2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    tmp_num2_1_fu_80 <= data_q0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_V_load_2_reg_402 = ap_const_lv2_3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                empty_fu_76 <= bitcast_ln41_fu_313_p1;
                tmp_num3_fu_72 <= data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_216_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_V_load_2_reg_402 <= p_V_fu_64;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln47_1_fu_221_p2 <= std_logic_vector(unsigned(i_1_fu_68) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, out_r_TREADY, p_V_load_2_reg_402)
    begin
                ap_block_pp0_stage0_01001 <= ((p_V_load_2_reg_402 = ap_const_lv2_0) and (out_r_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, out_r_TREADY, p_V_load_2_reg_402, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((p_V_load_2_reg_402 = ap_const_lv2_0) and (out_r_TREADY = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, out_r_TREADY, p_V_load_2_reg_402, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((p_V_load_2_reg_402 = ap_const_lv2_0) and (out_r_TREADY = ap_const_logic_0))));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(out_r_TREADY, p_V_load_2_reg_402)
    begin
                ap_block_state3_io <= ((p_V_load_2_reg_402 = ap_const_lv2_0) and (out_r_TREADY = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(out_r_TREADY, p_V_load_2_reg_402)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((p_V_load_2_reg_402 = ap_const_lv2_0) and (out_r_TREADY = ap_const_logic_0));
    end process;


    ap_condition_153_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln47_fu_216_p2, ap_block_pp0_stage0)
    begin
                ap_condition_153 <= ((icmp_ln47_fu_216_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln47_fu_216_p2)
    begin
        if (((icmp_ln47_fu_216_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln174_1_fu_283_p1 <= tmp_num1_1_fu_84;
    bitcast_ln174_2_fu_287_p1 <= tmp_num2_1_fu_80;
    bitcast_ln174_3_fu_291_p1 <= tmp_num3_fu_72;
    bitcast_ln174_fu_279_p1 <= tmp_num0_1_fu_88;
    bitcast_ln41_fu_313_p1 <= data_q0;
    data_addr_2_gep_fu_172_p3 <= i_1_cast_fu_230_p1(12 - 1 downto 0);
    data_addr_3_gep_fu_164_p3 <= i_1_cast_fu_230_p1(12 - 1 downto 0);
    data_addr_gep_fu_180_p3 <= i_1_cast_fu_230_p1(12 - 1 downto 0);

    data_address0_assign_proc : process(p_V_load_2_load_fu_227_p1, data_addr_3_gep_fu_164_p3, data_addr_2_gep_fu_172_p3, data_addr_gep_fu_180_p3, i_1_cast_fu_230_p1, ap_condition_153)
    begin
        if ((ap_const_boolean_1 = ap_condition_153)) then
            if ((p_V_load_2_load_fu_227_p1 = ap_const_lv2_3)) then 
                data_address0 <= data_addr_gep_fu_180_p3;
            elsif ((p_V_load_2_load_fu_227_p1 = ap_const_lv2_0)) then 
                data_address0 <= data_addr_2_gep_fu_172_p3;
            elsif ((p_V_load_2_load_fu_227_p1 = ap_const_lv2_1)) then 
                data_address0 <= data_addr_3_gep_fu_164_p3;
            elsif ((p_V_load_2_load_fu_227_p1 = ap_const_lv2_2)) then 
                data_address0 <= i_1_cast_fu_230_p1(12 - 1 downto 0);
            else 
                data_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            data_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    data_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln47_fu_216_p2, ap_block_pp0_stage0_11001, p_V_load_2_load_fu_227_p1)
    begin
        if ((((icmp_ln47_fu_216_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (p_V_load_2_load_fu_227_p1 = ap_const_lv2_3)) or ((icmp_ln47_fu_216_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (p_V_load_2_load_fu_227_p1 = ap_const_lv2_0)) or ((icmp_ln47_fu_216_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (p_V_load_2_load_fu_227_p1 = ap_const_lv2_1)) or ((icmp_ln47_fu_216_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (p_V_load_2_load_fu_227_p1 = ap_const_lv2_2)))) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_cast_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_68),64));
    icmp_ln47_fu_216_p2 <= "1" when (i_1_fu_68 = add_ln47) else "0";
    out_r_TDATA <= (((bitcast_ln174_3_fu_291_p1 & bitcast_ln174_2_fu_287_p1) & bitcast_ln174_1_fu_283_p1) & bitcast_ln174_fu_279_p1);

    out_r_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, out_r_TREADY, p_V_load_2_reg_402, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (p_V_load_2_reg_402 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            out_r_TDATA_blk_n <= out_r_TREADY;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_r_TVALID_assign_proc : process(ap_enable_reg_pp0_iter2, p_V_load_2_reg_402, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_V_load_2_reg_402 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            out_r_TVALID <= ap_const_logic_1;
        else 
            out_r_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    p_V_2_fu_241_p2 <= std_logic_vector(unsigned(p_V_fu_64) + unsigned(ap_const_lv2_1));
    p_V_load_2_load_fu_227_p1 <= p_V_fu_64;
    p_out <= empty_fu_76;

    p_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln47_fu_216_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln47_fu_216_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_num0_2_out <= tmp_num0_1_fu_88;

    tmp_num0_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln47_fu_216_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln47_fu_216_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp_num0_2_out_ap_vld <= ap_const_logic_1;
        else 
            tmp_num0_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_num1_1_out <= tmp_num1_1_fu_84;

    tmp_num1_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln47_fu_216_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln47_fu_216_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp_num1_1_out_ap_vld <= ap_const_logic_1;
        else 
            tmp_num1_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_num2_1_out <= tmp_num2_1_fu_80;

    tmp_num2_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln47_fu_216_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln47_fu_216_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp_num2_1_out_ap_vld <= ap_const_logic_1;
        else 
            tmp_num2_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
