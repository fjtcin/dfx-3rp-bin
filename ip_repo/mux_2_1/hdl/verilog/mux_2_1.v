// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mux_2_1_mux_2_1,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3,HLS_SYN_LUT=65,HLS_VERSION=2022_1}" *)

module mux_2_1 (
        ap_clk,
        ap_rst_n,
        opcode,
        in0_TDATA,
        in0_TVALID,
        in0_TREADY,
        in1_TDATA,
        in1_TVALID,
        in1_TREADY,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst_n;
input  [1:0] opcode;
input  [127:0] in0_TDATA;
input   in0_TVALID;
output   in0_TREADY;
input  [127:0] in1_TDATA;
input   in1_TVALID;
output   in1_TREADY;
output  [127:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;

 reg    ap_rst_n_inv;
reg    in0_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_fu_67_p3;
reg    in1_TDATA_blk_n;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg   [0:0] tmp_reg_75;
reg    ap_block_state1;
reg    ap_block_state1_io;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    regslice_both_out_r_U_apdone_blk;
reg    ap_block_state2;
reg    ap_block_state2_io;
wire    regslice_both_in0_U_apdone_blk;
wire   [127:0] in0_TDATA_int_regslice;
wire    in0_TVALID_int_regslice;
reg    in0_TREADY_int_regslice;
wire    regslice_both_in0_U_ack_in;
wire    regslice_both_in1_U_apdone_blk;
wire   [127:0] in1_TDATA_int_regslice;
wire    in1_TVALID_int_regslice;
reg    in1_TREADY_int_regslice;
wire    regslice_both_in1_U_ack_in;
reg   [127:0] out_r_TDATA_int_regslice;
reg    out_r_TVALID_int_regslice;
wire    out_r_TREADY_int_regslice;
wire    regslice_both_out_r_U_vld_out;
reg    ap_condition_170;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

mux_2_1_regslice_both #(
    .DataWidth( 128 ))
regslice_both_in0_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in0_TDATA),
    .vld_in(in0_TVALID),
    .ack_in(regslice_both_in0_U_ack_in),
    .data_out(in0_TDATA_int_regslice),
    .vld_out(in0_TVALID_int_regslice),
    .ack_out(in0_TREADY_int_regslice),
    .apdone_blk(regslice_both_in0_U_apdone_blk)
);

mux_2_1_regslice_both #(
    .DataWidth( 128 ))
regslice_both_in1_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_TDATA),
    .vld_in(in1_TVALID),
    .ack_in(regslice_both_in1_U_ack_in),
    .data_out(in1_TDATA_int_regslice),
    .vld_out(in1_TVALID_int_regslice),
    .ack_out(in1_TREADY_int_regslice),
    .apdone_blk(regslice_both_in1_U_apdone_blk)
);

mux_2_1_regslice_both #(
    .DataWidth( 128 ))
regslice_both_out_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_r_TDATA_int_regslice),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(out_r_TREADY_int_regslice),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_r_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_r_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_reg_75 <= opcode[32'd1];
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state1_io) | ((tmp_fu_67_p3 == 1'd1) & (out_r_TREADY_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd1) & (in1_TVALID_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd0) & (out_r_TREADY_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd0) & (in0_TVALID_int_regslice == 1'b0)))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out_r_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state2_io) | ((tmp_reg_75 == 1'd0) & (out_r_TREADY_int_regslice == 1'b0)) | ((tmp_reg_75 == 1'd1) & (out_r_TREADY_int_regslice == 1'b0)))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_67_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        in0_TDATA_blk_n = in0_TVALID_int_regslice;
    end else begin
        in0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | ((tmp_fu_67_p3 == 1'd1) & (out_r_TREADY_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd1) & (in1_TVALID_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd0) & (out_r_TREADY_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd0) & (in0_TVALID_int_regslice == 1'b0))) & (tmp_fu_67_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        in0_TREADY_int_regslice = 1'b1;
    end else begin
        in0_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_67_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        in1_TDATA_blk_n = in1_TVALID_int_regslice;
    end else begin
        in1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | ((tmp_fu_67_p3 == 1'd1) & (out_r_TREADY_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd1) & (in1_TVALID_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd0) & (out_r_TREADY_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd0) & (in0_TVALID_int_regslice == 1'b0))) & (tmp_fu_67_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        in1_TREADY_int_regslice = 1'b1;
    end else begin
        in1_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_reg_75 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_reg_75 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_fu_67_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_fu_67_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_r_TDATA_blk_n = out_r_TREADY_int_regslice;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_170)) begin
        if ((tmp_fu_67_p3 == 1'd1)) begin
            out_r_TDATA_int_regslice = in1_TDATA_int_regslice;
        end else if ((tmp_fu_67_p3 == 1'd0)) begin
            out_r_TDATA_int_regslice = in0_TDATA_int_regslice;
        end else begin
            out_r_TDATA_int_regslice = 'bx;
        end
    end else begin
        out_r_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state1_io) | ((tmp_fu_67_p3 == 1'd1) & (out_r_TREADY_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd1) & (in1_TVALID_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd0) & (out_r_TREADY_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd0) & (in0_TVALID_int_regslice == 1'b0))) & (tmp_fu_67_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | (~((1'b1 == ap_block_state1_io) | ((tmp_fu_67_p3 == 1'd1) & (out_r_TREADY_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd1) & (in1_TVALID_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd0) & (out_r_TREADY_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd0) & (in0_TVALID_int_regslice == 1'b0))) & (tmp_fu_67_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_r_TVALID_int_regslice = 1'b1;
    end else begin
        out_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b1 == ap_block_state1_io) | ((tmp_fu_67_p3 == 1'd1) & (out_r_TREADY_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd1) & (in1_TVALID_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd0) & (out_r_TREADY_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd0) & (in0_TVALID_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((regslice_both_out_r_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state2_io) | ((tmp_reg_75 == 1'd0) & (out_r_TREADY_int_regslice == 1'b0)) | ((tmp_reg_75 == 1'd1) & (out_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = (((tmp_fu_67_p3 == 1'd1) & (out_r_TREADY_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd1) & (in1_TVALID_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd0) & (out_r_TREADY_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd0) & (in0_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state1_io = (((tmp_fu_67_p3 == 1'd1) & (out_r_TREADY_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd0) & (out_r_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2 = ((regslice_both_out_r_U_apdone_blk == 1'b1) | ((tmp_reg_75 == 1'd0) & (out_r_TREADY_int_regslice == 1'b0)) | ((tmp_reg_75 == 1'd1) & (out_r_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2_io = (((tmp_reg_75 == 1'd0) & (out_r_TREADY_int_regslice == 1'b0)) | ((tmp_reg_75 == 1'd1) & (out_r_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_condition_170 = (~(((tmp_fu_67_p3 == 1'd1) & (out_r_TREADY_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd1) & (in1_TVALID_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd0) & (out_r_TREADY_int_regslice == 1'b0)) | ((tmp_fu_67_p3 == 1'd0) & (in0_TVALID_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign in0_TREADY = regslice_both_in0_U_ack_in;

assign in1_TREADY = regslice_both_in1_U_ack_in;

assign out_r_TVALID = regslice_both_out_r_U_vld_out;

assign tmp_fu_67_p3 = opcode[32'd1];


reg find_kernel_block = 0;
// synthesis translate_off
`include "mux_2_1_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //mux_2_1

