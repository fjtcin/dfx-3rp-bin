-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity csr_dec_csr_dec_Pipeline_VITIS_LOOP_76_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sext_ln76 : IN STD_LOGIC_VECTOR (31 downto 0);
    sext_ln76_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln1 : IN STD_LOGIC_VECTOR (11 downto 0);
    data_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    data_ce1 : OUT STD_LOGIC;
    data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (13 downto 0);
    a_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_we0 : OUT STD_LOGIC;
    a_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of csr_dec_csr_dec_Pipeline_VITIS_LOOP_76_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln76_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln76_1_cast_fu_137_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln76_1_cast_reg_351 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln79_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_70 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln76_fu_173_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln76_cast_fu_141_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal empty_16_fu_159_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln77_fu_163_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_V_fu_184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_206_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_fu_210_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xs_exp_V_fu_196_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_fu_224_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_fu_228_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_fu_242_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_234_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_fu_248_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_252_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1488_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_220_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_fu_264_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_268_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_4_fu_280_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_274_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_fu_288_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_fu_292_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal val_fu_302_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_s_fu_188_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_1_fu_310_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal result_V_fu_316_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln79_fu_324_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component csr_dec_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component csr_dec_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    k_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_70 <= sext_ln76_cast_fu_141_p1;
                elsif (((icmp_ln76_fu_154_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    k_fu_70 <= add_ln76_fu_173_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sext_ln76_1_cast_reg_351 <= sext_ln76_1_cast_fu_137_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    a_address0 <= zext_ln79_fu_329_p1(14 - 1 downto 0);

    a_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_d0 <= data_q0;

    a_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln346_fu_228_p2 <= std_logic_vector(unsigned(zext_ln346_fu_224_p1) + unsigned(ap_const_lv9_181));
    add_ln76_fu_173_p2 <= std_logic_vector(unsigned(k_fu_70) + unsigned(ap_const_lv64_1));
    add_ln77_fu_163_p2 <= std_logic_vector(unsigned(empty_16_fu_159_p1) + unsigned(trunc_ln1));
    add_ln79_fu_324_p2 <= std_logic_vector(unsigned(result_V_fu_316_p3) + unsigned(empty));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln76_fu_154_p2)
    begin
        if (((icmp_ln76_fu_154_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    data_V_fu_184_p1 <= data_q1;
    data_address0 <= k_fu_70(12 - 1 downto 0);
    data_address1 <= zext_ln77_fu_168_p1(12 - 1 downto 0);

    data_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_ce1 <= ap_const_logic_1;
        else 
            data_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_16_fu_159_p1 <= k_fu_70(12 - 1 downto 0);
    icmp_ln76_fu_154_p2 <= "1" when (signed(k_fu_70) < signed(sext_ln76_1_cast_reg_351)) else "0";
    isNeg_fu_234_p3 <= add_ln346_fu_228_p2(8 downto 8);
    mantissa_fu_210_p4 <= ((ap_const_lv1_1 & p_Result_1_fu_206_p1) & ap_const_lv1_0);
    p_Result_1_fu_206_p1 <= data_V_fu_184_p1(23 - 1 downto 0);
    p_Result_s_fu_188_p3 <= data_V_fu_184_p1(31 downto 31);
    r_V_1_fu_274_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_220_p1),to_integer(unsigned('0' & zext_ln1488_fu_264_p1(31-1 downto 0)))));
    r_V_fu_268_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_220_p1),to_integer(unsigned('0' & zext_ln1488_fu_264_p1(31-1 downto 0)))));
    result_V_1_fu_310_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(val_fu_302_p3));
    result_V_fu_316_p3 <= 
        result_V_1_fu_310_p2 when (p_Result_s_fu_188_p3(0) = '1') else 
        val_fu_302_p3;
        sext_ln1488_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_252_p3),32));

        sext_ln1512_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_fu_242_p2),9));

        sext_ln76_1_cast_fu_137_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln76_1),64));

        sext_ln76_cast_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln76),64));

    sub_ln1512_fu_242_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_fu_196_p4));
    tmp_4_fu_280_p3 <= r_V_fu_268_p2(24 downto 24);
    tmp_s_fu_292_p4 <= r_V_1_fu_274_p2(37 downto 24);
    ush_fu_252_p3 <= 
        sext_ln1512_fu_248_p1 when (isNeg_fu_234_p3(0) = '1') else 
        add_ln346_fu_228_p2;
    val_fu_302_p3 <= 
        zext_ln818_fu_288_p1 when (isNeg_fu_234_p3(0) = '1') else 
        tmp_s_fu_292_p4;
    xs_exp_V_fu_196_p4 <= data_V_fu_184_p1(30 downto 23);
    zext_ln1488_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_260_p1),79));
    zext_ln15_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_210_p4),79));
    zext_ln346_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_fu_196_p4),9));
    zext_ln77_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln77_fu_163_p2),64));
    zext_ln79_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_fu_324_p2),64));
    zext_ln818_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_280_p3),14));
end behav;
