// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module csr_dec_csr_dec_Pipeline_VITIS_LOOP_76_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln76,
        sext_ln76_1,
        trunc_ln1,
        data_address0,
        data_ce0,
        data_q0,
        data_address1,
        data_ce1,
        data_q1,
        empty,
        a_address0,
        a_ce0,
        a_we0,
        a_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] sext_ln76;
input  [31:0] sext_ln76_1;
input  [11:0] trunc_ln1;
output  [11:0] data_address0;
output   data_ce0;
input  [31:0] data_q0;
output  [11:0] data_address1;
output   data_ce1;
input  [31:0] data_q1;
input  [13:0] empty;
output  [13:0] a_address0;
output   a_ce0;
output   a_we0;
output  [31:0] a_d0;

reg ap_idle;
reg data_ce0;
reg data_ce1;
reg a_ce0;
reg a_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln76_fu_154_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire  signed [63:0] sext_ln76_1_cast_fu_137_p1;
reg  signed [63:0] sext_ln76_1_cast_reg_351;
wire   [63:0] zext_ln77_fu_168_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln79_fu_329_p1;
reg   [63:0] k_fu_70;
wire   [63:0] add_ln76_fu_173_p2;
wire  signed [63:0] sext_ln76_cast_fu_141_p1;
wire    ap_loop_init;
wire   [11:0] empty_16_fu_159_p1;
wire   [11:0] add_ln77_fu_163_p2;
wire   [31:0] data_V_fu_184_p1;
wire   [22:0] p_Result_1_fu_206_p1;
wire   [24:0] mantissa_fu_210_p4;
wire   [7:0] xs_exp_V_fu_196_p4;
wire   [8:0] zext_ln346_fu_224_p1;
wire   [8:0] add_ln346_fu_228_p2;
wire   [7:0] sub_ln1512_fu_242_p2;
wire   [0:0] isNeg_fu_234_p3;
wire  signed [8:0] sext_ln1512_fu_248_p1;
wire   [8:0] ush_fu_252_p3;
wire  signed [31:0] sext_ln1488_fu_260_p1;
wire   [78:0] zext_ln15_fu_220_p1;
wire   [78:0] zext_ln1488_fu_264_p1;
wire   [78:0] r_V_fu_268_p2;
wire   [0:0] tmp_4_fu_280_p3;
wire   [78:0] r_V_1_fu_274_p2;
wire   [13:0] zext_ln818_fu_288_p1;
wire   [13:0] tmp_s_fu_292_p4;
wire   [13:0] val_fu_302_p3;
wire   [0:0] p_Result_s_fu_188_p3;
wire   [13:0] result_V_1_fu_310_p2;
wire   [13:0] result_V_fu_316_p3;
wire   [13:0] add_ln79_fu_324_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

csr_dec_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_fu_70 <= sext_ln76_cast_fu_141_p1;
        end else if (((icmp_ln76_fu_154_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            k_fu_70 <= add_ln76_fu_173_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sext_ln76_1_cast_reg_351 <= sext_ln76_1_cast_fu_137_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln76_fu_154_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_ce1 = 1'b1;
    end else begin
        data_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln79_fu_329_p1;

assign a_d0 = data_q0;

assign add_ln346_fu_228_p2 = ($signed(zext_ln346_fu_224_p1) + $signed(9'd385));

assign add_ln76_fu_173_p2 = (k_fu_70 + 64'd1);

assign add_ln77_fu_163_p2 = (empty_16_fu_159_p1 + trunc_ln1);

assign add_ln79_fu_324_p2 = (result_V_fu_316_p3 + empty);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign data_V_fu_184_p1 = data_q1;

assign data_address0 = k_fu_70;

assign data_address1 = zext_ln77_fu_168_p1;

assign empty_16_fu_159_p1 = k_fu_70[11:0];

assign icmp_ln76_fu_154_p2 = (($signed(k_fu_70) < $signed(sext_ln76_1_cast_reg_351)) ? 1'b1 : 1'b0);

assign isNeg_fu_234_p3 = add_ln346_fu_228_p2[32'd8];

assign mantissa_fu_210_p4 = {{{{1'd1}, {p_Result_1_fu_206_p1}}}, {1'd0}};

assign p_Result_1_fu_206_p1 = data_V_fu_184_p1[22:0];

assign p_Result_s_fu_188_p3 = data_V_fu_184_p1[32'd31];

assign r_V_1_fu_274_p2 = zext_ln15_fu_220_p1 << zext_ln1488_fu_264_p1;

assign r_V_fu_268_p2 = zext_ln15_fu_220_p1 >> zext_ln1488_fu_264_p1;

assign result_V_1_fu_310_p2 = (14'd0 - val_fu_302_p3);

assign result_V_fu_316_p3 = ((p_Result_s_fu_188_p3[0:0] == 1'b1) ? result_V_1_fu_310_p2 : val_fu_302_p3);

assign sext_ln1488_fu_260_p1 = $signed(ush_fu_252_p3);

assign sext_ln1512_fu_248_p1 = $signed(sub_ln1512_fu_242_p2);

assign sext_ln76_1_cast_fu_137_p1 = $signed(sext_ln76_1);

assign sext_ln76_cast_fu_141_p1 = $signed(sext_ln76);

assign sub_ln1512_fu_242_p2 = (8'd127 - xs_exp_V_fu_196_p4);

assign tmp_4_fu_280_p3 = r_V_fu_268_p2[32'd24];

assign tmp_s_fu_292_p4 = {{r_V_1_fu_274_p2[37:24]}};

assign ush_fu_252_p3 = ((isNeg_fu_234_p3[0:0] == 1'b1) ? sext_ln1512_fu_248_p1 : add_ln346_fu_228_p2);

assign val_fu_302_p3 = ((isNeg_fu_234_p3[0:0] == 1'b1) ? zext_ln818_fu_288_p1 : tmp_s_fu_292_p4);

assign xs_exp_V_fu_196_p4 = {{data_V_fu_184_p1[30:23]}};

assign zext_ln1488_fu_264_p1 = $unsigned(sext_ln1488_fu_260_p1);

assign zext_ln15_fu_220_p1 = mantissa_fu_210_p4;

assign zext_ln346_fu_224_p1 = xs_exp_V_fu_196_p4;

assign zext_ln77_fu_168_p1 = add_ln77_fu_163_p2;

assign zext_ln79_fu_329_p1 = add_ln79_fu_324_p2;

assign zext_ln818_fu_288_p1 = tmp_4_fu_280_p3;

endmodule //csr_dec_csr_dec_Pipeline_VITIS_LOOP_76_2
